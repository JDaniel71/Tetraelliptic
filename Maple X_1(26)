# p1(z,q): the q-expansion of the Weierstrass elliptic function
# pp1(z,q): the q-expansion of the derivative of the Weierstrass elliptic function
> # 
> p1:=(z,q)->-4*Pi^2*(-1016+192*z^192+192/z^192+z+96*z^96+96/z^96+64*z^64+64/z^64+48*z^48+48/z^48+24*z^24+24/z^24+32*z^32+32/z^32+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+8*z^8+8/z^8+12*z^12+12/z^12+16*z^16+16/z^16)*q^192-4*Pi^2*(-388+193*z^193+193/z^193+z+1/z)*q^193-4*Pi^2*(-588+97*z^97+97/z^97+194*z^194+194/z^194+2*z^2+2/z^2+z+1/z)*q^194-4*Pi^2*(-672+195*z^195+195/z^195+3*z^3+3/z^3+5*z^5+5/z^5+z+1/z+13*z^13+13/z^13+15*z^15+15/z^15+39*z^39+39/z^39+65*z^65+65/z^65)*q^195-4*Pi^2*(-798+98*z^98+98/z^98+196*z^196+196/z^196+7*z^7+7/z^7+2*z^2+2/z^2+4*z^4+4/z^4+14*z^14+14/z^14+z+1/z+28*z^28+28/z^28+49*z^49+49/z^49)*q^196-4*Pi^2*(-396+197*z^197+197/z^197+z+1/z)*q^197-4*Pi^2*(-936+198*z^198+198/z^198+z+99*z^99+99/z^99+66*z^66+66/z^66+22*z^22+22/z^22+33*z^33+33/z^33+1/z+2*z^2+2/z^2+3*z^3+3/z^3+6*z^6+6/z^6+9*z^9+9/z^9+11*z^11+11/z^11+18*z^18+18/z^18)*q^198-4*Pi^2*(-400+199*z^199+199/z^199+z+1/z)*q^199-4*Pi^2*(-930+200*z^200+200/z^200+z+100*z^100+100/z^100+40*z^40+40/z^40+50*z^50+50/z^50+20*z^20+20/z^20+25*z^25+25/z^25+1/z+2*z^2+2/z^2+4*z^4+4/z^4+5*z^5+5/z^5+8*z^8+8/z^8+10*z^10+10/z^10)*q^200-4*Pi^2*(-756+z+160*z^160+160/z^160+80*z^80+80/z^80+40*z^40+40/z^40+20*z^20+20/z^20+32*z^32+32/z^32+1/z+2*z^2+2/z^2+4*z^4+4/z^4+5*z^5+5/z^5+8*z^8+8/z^8+10*z^10+10/z^10+16*z^16+16/z^16)*q^160-4*Pi^2*(161*z^161+161/z^161+7*z^7+7/z^7-384+z+1/z+23*z^23+23/z^23)*q^161-4*Pi^2*(z+1/z+9*z^9+9/z^9+81*z^81+81/z^81+162*z^162+162/z^162+6*z^6+6/z^6-726+3*z^3+3/z^3+2*z^2+2/z^2+18*z^18+18/z^18+27*z^27+27/z^27+54*z^54+54/z^54)*q^162-4*Pi^2*(163*z^163+163/z^163+z+1/z-328)*q^163-4*Pi^2*(82*z^82+82/z^82+164*z^164+164/z^164+z+1/z+2*z^2+2/z^2-588+4*z^4+4/z^4+41*z^41+41/z^41)*q^164-4*Pi^2*(z+1/z+165*z^165+165/z^165-576+5*z^5+5/z^5+3*z^3+3/z^3+11*z^11+11/z^11+15*z^15+15/z^15+33*z^33+33/z^33+55*z^55+55/z^55)*q^165-4*Pi^2*(83*z^83+83/z^83+166*z^166+166/z^166+z+1/z-504+2*z^2+2/z^2)*q^166-4*Pi^2*(167*z^167+167/z^167-336+z+1/z)*q^167-4*Pi^2*(-960+z+168*z^168+168/z^168+84*z^84+84/z^84+42*z^42+42/z^42+56*z^56+56/z^56+21*z^21+21/z^21+24*z^24+24/z^24+28*z^28+28/z^28+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+7*z^7+7/z^7+8*z^8+8/z^8+12*z^12+12/z^12+14*z^14+14/z^14)*q^168-4*Pi^2*(169*z^169+169/z^169-366+z+1/z+13*z^13+13/z^13)*q^169-4*Pi^2*(10*z^10+10/z^10+85*z^85+85/z^85+170*z^170+170/z^170+5*z^5+5/z^5-648+z+1/z+2*z^2+2/z^2+17*z^17+17/z^17+34*z^34+34/z^34)*q^170-4*Pi^2*(-520+9*z^9+9/z^9+171*z^171+171/z^171+z+1/z+3*z^3+3/z^3+19*z^19+19/z^19+57*z^57+57/z^57)*q^171-4*Pi^2*(-616+86*z^86+86/z^86+172*z^172+172/z^172+2*z^2+2/z^2+z+1/z+4*z^4+4/z^4+43*z^43+43/z^43)*q^172-4*Pi^2*(-348+173*z^173+173/z^173+z+1/z)*q^173-4*Pi^2*(-720+87*z^87+87/z^87+174*z^174+174/z^174+6*z^6+6/z^6+2*z^2+2/z^2+3*z^3+3/z^3+z+1/z+29*z^29+29/z^29+58*z^58+58/z^58)*q^174-4*Pi^2*(-496+175*z^175+175/z^175+z+1/z+7*z^7+7/z^7+5*z^5+5/z^5+25*z^25+25/z^25+35*z^35+35/z^35)*q^175-4*Pi^2*(-744+88*z^88+88/z^88+176*z^176+176/z^176+8*z^8+8/z^8+2*z^2+2/z^2+4*z^4+4/z^4+11*z^11+11/z^11+16*z^16+16/z^16+22*z^22+22/z^22+44*z^44+44/z^44+z+1/z)*q^176-4*Pi^2*(-480+177*z^177+177/z^177+z+1/z+3*z^3+3/z^3+59*z^59+59/z^59)*q^177-4*Pi^2*(-540+89*z^89+89/z^89+178*z^178+178/z^178+z+1/z+2*z^2+2/z^2)*q^178-4*Pi^2*(-360+179*z^179+179/z^179+z+1/z)*q^179-4*Pi^2*(-1092+180*z^180+180/z^180+z+90*z^90+90/z^90+60*z^60+60/z^60+45*z^45+45/z^45+20*z^20+20/z^20+30*z^30+30/z^30+36*z^36+36/z^36+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+5*z^5+5/z^5+6*z^6+6/z^6+9*z^9+9/z^9+10*z^10+10/z^10+12*z^12+12/z^12+15*z^15+15/z^15+18*z^18+18/z^18)*q^180-4*Pi^2*(-364+181*z^181+181/z^181+z+1/z)*q^181-4*Pi^2*(-672+91*z^91+91/z^91+182*z^182+182/z^182+7*z^7+7/z^7+z+1/z+2*z^2+2/z^2+13*z^13+13/z^13+14*z^14+14/z^14+26*z^26+26/z^26)*q^182-4*Pi^2*(-496+183*z^183+183/z^183+3*z^3+3/z^3+z+1/z+61*z^61+61/z^61)*q^183-4*Pi^2*(-720+92*z^92+92/z^92+184*z^184+184/z^184+8*z^8+8/z^8+4*z^4+4/z^4+2*z^2+2/z^2+23*z^23+23/z^23+z+1/z+46*z^46+46/z^46)*q^184-4*Pi^2*(-456+185*z^185+185/z^185+z+1/z+5*z^5+5/z^5+37*z^37+37/z^37)*q^185-4*Pi^2*(-768+93*z^93+93/z^93+186*z^186+186/z^186+2*z^2+2/z^2+6*z^6+6/z^6+z+1/z+3*z^3+3/z^3+31*z^31+31/z^31+62*z^62+62/z^62)*q^186-4*Pi^2*(-432+11*z^11+11/z^11+187*z^187+187/z^187+z+1/z+17*z^17+17/z^17)*q^187-4*Pi^2*(-672+94*z^94+94/z^94+188*z^188+188/z^188+4*z^4+4/z^4+z+1/z+2*z^2+2/z^2+47*z^47+47/z^47)*q^188-4*Pi^2*(-640+189*z^189+189/z^189+9*z^9+9/z^9+7*z^7+7/z^7+z+1/z+3*z^3+3/z^3+21*z^21+21/z^21+27*z^27+27/z^27+63*z^63+63/z^63)*q^189-4*Pi^2*(-720+10*z^10+10/z^10+95*z^95+95/z^95+190*z^190+190/z^190+z+1/z+2*z^2+2/z^2+5*z^5+5/z^5+19*z^19+19/z^19+38*z^38+38/z^38)*q^190-4*Pi^2*(-384+191*z^191+191/z^191+z+1/z)*q^191-4*Pi^2*(5*z^5+5/z^5-12+z+1/z)*q^5-4*Pi^2*(11*z^11+11/z^11+22*z^22+22/z^22+z+1/z-72+2*z^2+2/z^2)*q^22-4*Pi^2*(5*z^5+5/z^5+10*z^10+10/z^10-36+z+1/z+2*z^2+2/z^2)*q^10-4*Pi^2*(13*z^13+13/z^13-28+z+1/z)*q^13-4*Pi^2*(13*z^13+13/z^13+26*z^26+26/z^26-84+z+1/z+2*z^2+2/z^2)*q^26-4*Pi^2*(17*z^17+17/z^17-36+z+1/z)*q^17-4*Pi^2*(14*z^14+14/z^14+28*z^28+28/z^28-112+z+1/z+2*z^2+2/z^2+4*z^4+4/z^4+7*z^7+7/z^7)*q^28-4*Pi^2*(z+1/z-6+2*z^2+2/z^2)*q^2-4*Pi^2*(4*z^4+4/z^4+8*z^8+8/z^8-30+z+1/z+2*z^2+2/z^2)*q^8-4*Pi^2*(z+1/z+10*z^10+10/z^10+20*z^20+20/z^20-84+2*z^2+2/z^2+4*z^4+4/z^4+5*z^5+5/z^5)*q^20-4*Pi^2*(49*z^49+49/z^49-114+z+1/z+7*z^7+7/z^7)*q^49-4*Pi^2*(25*z^25+25/z^25+50*z^50+50/z^50-186+2*z^2+2/z^2+z+1/z+5*z^5+5/z^5+10*z^10+10/z^10)*q^50-4*Pi^2*(53*z^53+53/z^53-108+z+1/z)*q^53-4*Pi^2*(26*z^26+26/z^26+52*z^52+52/z^52-196+2*z^2+2/z^2+z+1/z+4*z^4+4/z^4+13*z^13+13/z^13)*q^52-4*Pi^2*(3*z^3+3/z^3+27*z^27+27/z^27+54*z^54+54/z^54-240+2*z^2+2/z^2+z+1/z+6*z^6+6/z^6+9*z^9+9/z^9+18*z^18+18/z^18)*q^54-4*Pi^2*(3*z^3+3/z^3+51*z^51+51/z^51-144+z+1/z+17*z^17+17/z^17)*q^51-4*Pi^2*(55*z^55+55/z^55-144+z+1/z+5*z^5+5/z^5+11*z^11+11/z^11)*q^55-4*Pi^2*(28*z^28+28/z^28+56*z^56+56/z^56-240+2*z^2+2/z^2+z+1/z+4*z^4+4/z^4+7*z^7+7/z^7+8*z^8+8/z^8+14*z^14+14/z^14)*q^56-4*Pi^2*(3*z^3+3/z^3+57*z^57+57/z^57-160+z+1/z+19*z^19+19/z^19)*q^57-4*Pi^2*(29*z^29+29/z^29+58*z^58+58/z^58+2*z^2+2/z^2-180+z+1/z)*q^58-4*Pi^2*(59*z^59+59/z^59-120+z+1/z)*q^59-4*Pi^2*(-336+z+60*z^60+60/z^60+20*z^20+20/z^20+30*z^30+30/z^30+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+5*z^5+5/z^5+6*z^6+6/z^6+10*z^10+10/z^10+12*z^12+12/z^12+15*z^15+15/z^15)*q^60-4*Pi^2*(61*z^61+61/z^61-124+z+1/z)*q^61-4*Pi^2*(31*z^31+31/z^31+62*z^62+62/z^62-192+2*z^2+2/z^2+z+1/z)*q^62-4*Pi^2*(1/12+z/(1-z)^2)-4*Pi^2*(37*z^37+37/z^37-76+z+1/z)*q^37-4*Pi^2*(2*z^2+2/z^2+19*z^19+19/z^19+38*z^38+38/z^38-120+z+1/z)*q^38-4*Pi^2*(39*z^39+39/z^39-112+z+1/z+3*z^3+3/z^3+13*z^13+13/z^13)*q^39-4*Pi^2*(2*z^2+2/z^2+20*z^20+20/z^20+40*z^40+40/z^40-180+z+1/z+4*z^4+4/z^4+5*z^5+5/z^5+8*z^8+8/z^8+10*z^10+10/z^10)*q^40-4*Pi^2*(41*z^41+41/z^41-84+z+1/z)*q^41-4*Pi^2*(21*z^21+21/z^21+42*z^42+42/z^42+2*z^2+2/z^2-192+z+1/z+3*z^3+3/z^3+6*z^6+6/z^6+7*z^7+7/z^7+14*z^14+14/z^14)*q^42-4*Pi^2*(43*z^43+43/z^43-88+z+1/z)*q^43-4*Pi^2*(22*z^22+22/z^22+44*z^44+44/z^44+2*z^2+2/z^2-168+z+1/z+4*z^4+4/z^4+11*z^11+11/z^11)*q^44-4*Pi^2*(45*z^45+45/z^45-156+z+1/z+3*z^3+3/z^3+5*z^5+5/z^5+9*z^9+9/z^9+15*z^15+15/z^15)*q^45-4*Pi^2*(23*z^23+23/z^23+46*z^46+46/z^46-144+2*z^2+2/z^2+z+1/z)*q^46-4*Pi^2*(47*z^47+47/z^47-96+z+1/z)*q^47-4*Pi^2*(24*z^24+24/z^24+48*z^48+48/z^48-248+2*z^2+2/z^2+z+1/z+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+8*z^8+8/z^8+12*z^12+12/z^12+16*z^16+16/z^16)*q^48-4*Pi^2*(63*z^63+63/z^63+3*z^3+3/z^3+z+1/z-208+7*z^7+7/z^7+9*z^9+9/z^9+21*z^21+21/z^21)*q^63-4*Pi^2*(32*z^32+32/z^32+64*z^64+64/z^64-254+z+1/z+2*z^2+2/z^2+4*z^4+4/z^4+8*z^8+8/z^8+16*z^16+16/z^16)*q^64-4*Pi^2*(65*z^65+65/z^65-168+z+1/z+5*z^5+5/z^5+13*z^13+13/z^13)*q^65-4*Pi^2*(33*z^33+33/z^33+66*z^66+66/z^66+3*z^3+3/z^3-288+z+1/z+2*z^2+2/z^2+6*z^6+6/z^6+11*z^11+11/z^11+22*z^22+22/z^22)*q^66-4*Pi^2*(67*z^67+67/z^67-136+z+1/z)*q^67-4*Pi^2*(4*z^4+4/z^4+34*z^34+34/z^34+68*z^68+68/z^68-252+2*z^2+2/z^2+z+1/z+17*z^17+17/z^17)*q^68-4*Pi^2*(69*z^69+69/z^69-192+3*z^3+3/z^3+z+1/z+23*z^23+23/z^23)*q^69-4*Pi^2*(35*z^35+35/z^35+70*z^70+70/z^70-288+2*z^2+2/z^2+z+1/z+5*z^5+5/z^5+7*z^7+7/z^7+10*z^10+10/z^10+14*z^14+14/z^14)*q^70-4*Pi^2*(71*z^71+71/z^71-144+z+1/z)*q^71-4*Pi^2*(-390+z+72*z^72+72/z^72+24*z^24+24/z^24+36*z^36+36/z^36+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+8*z^8+8/z^8+9*z^9+9/z^9+12*z^12+12/z^12+18*z^18+18/z^18)*q^72-4*Pi^2*(73*z^73+73/z^73+z+1/z-148)*q^73-4*Pi^2*(37*z^37+37/z^37+74*z^74+74/z^74-228+z+1/z+2*z^2+2/z^2)*q^74-4*Pi^2*(75*z^75+75/z^75-248+3*z^3+3/z^3+z+1/z+5*z^5+5/z^5+15*z^15+15/z^15+25*z^25+25/z^25)*q^75-4*Pi^2*(4*z^4+4/z^4+38*z^38+38/z^38+76*z^76+76/z^76-280+z+1/z+2*z^2+2/z^2+19*z^19+19/z^19)*q^76-4*Pi^2*(77*z^77+77/z^77+z+1/z-192+7*z^7+7/z^7+11*z^11+11/z^11)*q^77-4*Pi^2*(z+1/z+39*z^39+39/z^39+78*z^78+78/z^78-336+3*z^3+3/z^3+2*z^2+2/z^2+6*z^6+6/z^6+13*z^13+13/z^13+26*z^26+26/z^26)*q^78-4*Pi^2*(79*z^79+79/z^79-160+z+1/z)*q^79-4*Pi^2*(4*z^4+4/z^4+40*z^40+40/z^40+80*z^80+80/z^80-372+2*z^2+2/z^2+z+1/z+5*z^5+5/z^5+8*z^8+8/z^8+10*z^10+10/z^10+16*z^16+16/z^16+20*z^20+20/z^20)*q^80-4*Pi^2*(81*z^81+81/z^81-242+3*z^3+3/z^3+z+1/z+9*z^9+9/z^9+27*z^27+27/z^27)*q^81-4*Pi^2*(41*z^41+41/z^41+82*z^82+82/z^82-252+z+1/z+2*z^2+2/z^2)*q^82-4*Pi^2*(83*z^83+83/z^83+z+1/z-168)*q^83-4*Pi^2*(-448+z+84*z^84+84/z^84+42*z^42+42/z^42+21*z^21+21/z^21+28*z^28+28/z^28+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+7*z^7+7/z^7+12*z^12+12/z^12+14*z^14+14/z^14)*q^84-4*Pi^2*(5*z^5+5/z^5+85*z^85+85/z^85-216+z+1/z+17*z^17+17/z^17)*q^85-4*Pi^2*(43*z^43+43/z^43+86*z^86+86/z^86-264+z+1/z+2*z^2+2/z^2)*q^86-4*Pi^2*(87*z^87+87/z^87+z+1/z+3*z^3+3/z^3-240+29*z^29+29/z^29)*q^87-4*Pi^2*(44*z^44+44/z^44+88*z^88+88/z^88+4*z^4+4/z^4-360+2*z^2+2/z^2+z+1/z+8*z^8+8/z^8+11*z^11+11/z^11+22*z^22+22/z^22)*q^88-4*Pi^2*(89*z^89+89/z^89-180+z+1/z)*q^89-4*Pi^2*(-468+z+90*z^90+90/z^90+45*z^45+45/z^45+30*z^30+30/z^30+1/z+2*z^2+2/z^2+3*z^3+3/z^3+5*z^5+5/z^5+6*z^6+6/z^6+9*z^9+9/z^9+10*z^10+10/z^10+15*z^15+15/z^15+18*z^18+18/z^18)*q^90-4*Pi^2*(91*z^91+91/z^91-224+z+1/z+7*z^7+7/z^7+13*z^13+13/z^13)*q^91-4*Pi^2*(46*z^46+46/z^46+92*z^92+92/z^92-336+4*z^4+4/z^4+z+1/z+2*z^2+2/z^2+23*z^23+23/z^23)*q^92-4*Pi^2*(93*z^93+93/z^93-256+3*z^3+3/z^3+z+1/z+31*z^31+31/z^31)*q^93-4*Pi^2*(47*z^47+47/z^47+94*z^94+94/z^94-288+2*z^2+2/z^2+z+1/z)*q^94-4*Pi^2*(5*z^5+5/z^5+95*z^95+95/z^95+z+1/z-240+19*z^19+19/z^19)*q^95-4*Pi^2*(64*z^64+64/z^64+128*z^128+128/z^128-510+2*z^2+2/z^2+z+1/z+4*z^4+4/z^4+8*z^8+8/z^8+16*z^16+16/z^16+32*z^32+32/z^32)*q^128-4*Pi^2*(129*z^129+129/z^129-352+z+1/z+3*z^3+3/z^3+43*z^43+43/z^43)*q^129-4*Pi^2*(65*z^65+65/z^65+130*z^130+130/z^130+2*z^2+2/z^2-504+5*z^5+5/z^5+z+1/z+10*z^10+10/z^10+13*z^13+13/z^13+26*z^26+26/z^26)*q^130-4*Pi^2*(131*z^131+131/z^131+z+1/z-264)*q^131-4*Pi^2*(-672+z+132*z^132+132/z^132+66*z^66+66/z^66+44*z^44+44/z^44+22*z^22+22/z^22+33*z^33+33/z^33+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+11*z^11+11/z^11+12*z^12+12/z^12)*q^132-4*Pi^2*(7*z^7+7/z^7+133*z^133+133/z^133-320+z+1/z+19*z^19+19/z^19)*q^133-4*Pi^2*(67*z^67+67/z^67+134*z^134+134/z^134-408+z+1/z+2*z^2+2/z^2)*q^134-4*Pi^2*(135*z^135+135/z^135+5*z^5+5/z^5-480+z+1/z+3*z^3+3/z^3+9*z^9+9/z^9+15*z^15+15/z^15+27*z^27+27/z^27+45*z^45+45/z^45)*q^135-4*Pi^2*(8*z^8+8/z^8+68*z^68+68/z^68+136*z^136+136/z^136+2*z^2+2/z^2+z+1/z+4*z^4+4/z^4-540+17*z^17+17/z^17+34*z^34+34/z^34)*q^136-4*Pi^2*(137*z^137+137/z^137-276+z+1/z)*q^137-4*Pi^2*(69*z^69+69/z^69+138*z^138+138/z^138+6*z^6+6/z^6+2*z^2+2/z^2+z+1/z-576+3*z^3+3/z^3+23*z^23+23/z^23+46*z^46+46/z^46)*q^138-4*Pi^2*(139*z^139+139/z^139-280+z+1/z)*q^139-4*Pi^2*(-672+z+140*z^140+140/z^140+70*z^70+70/z^70+20*z^20+20/z^20+28*z^28+28/z^28+35*z^35+35/z^35+1/z+2*z^2+2/z^2+4*z^4+4/z^4+5*z^5+5/z^5+7*z^7+7/z^7+10*z^10+10/z^10+14*z^14+14/z^14)*q^140-4*Pi^2*(141*z^141+141/z^141+3*z^3+3/z^3-384+z+1/z+47*z^47+47/z^47)*q^141-4*Pi^2*(z+1/z+71*z^71+71/z^71+142*z^142+142/z^142-432+2*z^2+2/z^2)*q^142-4*Pi^2*(143*z^143+143/z^143-336+z+1/z+11*z^11+11/z^11+13*z^13+13/z^13)*q^143-4*Pi^2*(-806+z+144*z^144+144/z^144+72*z^72+72/z^72+48*z^48+48/z^48+24*z^24+24/z^24+36*z^36+36/z^36+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+8*z^8+8/z^8+9*z^9+9/z^9+12*z^12+12/z^12+16*z^16+16/z^16+18*z^18+18/z^18)*q^144-4*Pi^2*(145*z^145+145/z^145+5*z^5+5/z^5-360+z+1/z+29*z^29+29/z^29)*q^145-4*Pi^2*(73*z^73+73/z^73+146*z^146+146/z^146-444+z+1/z+2*z^2+2/z^2)*q^146-4*Pi^2*(147*z^147+147/z^147+7*z^7+7/z^7-456+z+1/z+3*z^3+3/z^3+21*z^21+21/z^21+49*z^49+49/z^49)*q^147-4*Pi^2*(2*z^2+2/z^2+74*z^74+74/z^74+148*z^148+148/z^148+z+1/z-532+4*z^4+4/z^4+37*z^37+37/z^37)*q^148-4*Pi^2*(149*z^149+149/z^149+z+1/z-300)*q^149-4*Pi^2*(-744+z+150*z^150+150/z^150+75*z^75+75/z^75+50*z^50+50/z^50+25*z^25+25/z^25+30*z^30+30/z^30+1/z+2*z^2+2/z^2+3*z^3+3/z^3+5*z^5+5/z^5+6*z^6+6/z^6+10*z^10+10/z^10+15*z^15+15/z^15)*q^150-4*Pi^2*(151*z^151+151/z^151+z+1/z-304)*q^151-4*Pi^2*(8*z^8+8/z^8+76*z^76+76/z^76+152*z^152+152/z^152+z+1/z-600+2*z^2+2/z^2+4*z^4+4/z^4+19*z^19+19/z^19+38*z^38+38/z^38)*q^152-4*Pi^2*(9*z^9+9/z^9+153*z^153+153/z^153-468+z+1/z+3*z^3+3/z^3+17*z^17+17/z^17+51*z^51+51/z^51)*q^153-4*Pi^2*(77*z^77+77/z^77+154*z^154+154/z^154+7*z^7+7/z^7+z+1/z-576+2*z^2+2/z^2+11*z^11+11/z^11+14*z^14+14/z^14+22*z^22+22/z^22)*q^154-4*Pi^2*(155*z^155+155/z^155-384+z+1/z+5*z^5+5/z^5+31*z^31+31/z^31)*q^155-4*Pi^2*(157*z^157+157/z^157+z+1/z-316)*q^157-4*Pi^2*(-784+z+156*z^156+156/z^156+78*z^78+78/z^78+39*z^39+39/z^39+52*z^52+52/z^52+26*z^26+26/z^26+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+12*z^12+12/z^12+13*z^13+13/z^13)*q^156-4*Pi^2*(79*z^79+79/z^79+158*z^158+158/z^158+z+1/z+2*z^2+2/z^2-480)*q^158-4*Pi^2*(159*z^159+159/z^159-432+z+1/z+3*z^3+3/z^3+53*z^53+53/z^53)*q^159-4*Pi^2*(11*z^11+11/z^11-24+z+1/z)*q^11-4*Pi^2*(25*z^25+25/z^25-62+z+1/z+5*z^5+5/z^5)*q^25-4*Pi^2*(4*z^4+4/z^4+6*z^6+6/z^6+12*z^12+12/z^12-56+z+1/z+2*z^2+2/z^2+3*z^3+3/z^3)*q^12-4*Pi^2*(3*z^3+3/z^3+9*z^9+9/z^9-26+z+1/z)*q^9-4*Pi^2*(29*z^29+29/z^29+z+1/z-60)*q^29-4*Pi^2*(z+1/z+19*z^19+19/z^19-40)*q^19-4*Pi^2*(7*z^7+7/z^7+21*z^21+21/z^21+z+1/z-64+3*z^3+3/z^3)*q^21-4*Pi^2*(23*z^23+23/z^23+z+1/z-48)*q^23-4*Pi^2*(8*z^8+8/z^8+12*z^12+12/z^12+24*z^24+24/z^24+z+1/z-120+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6)*q^24-4*Pi^2*(z+1/z+6*z^6+6/z^6+9*z^9+9/z^9+18*z^18+18/z^18-78+2*z^2+2/z^2+3*z^3+3/z^3)*q^18-4*Pi^2*(z+1/z+3*z^3+3/z^3-8)*q^3-4*Pi^2*(-2+z+1/z)*q-4*Pi^2*(8*z^8+8/z^8+16*z^16+16/z^16-62+z+1/z+2*z^2+2/z^2+4*z^4+4/z^4)*q^16-4*Pi^2*(10*z^10+10/z^10+15*z^15+15/z^15+30*z^30+30/z^30-144+z+1/z+2*z^2+2/z^2+3*z^3+3/z^3+5*z^5+5/z^5+6*z^6+6/z^6)*q^30-4*Pi^2*(2*z^2+2/z^2+4*z^4+4/z^4-14+z+1/z)*q^4-4*Pi^2*(7*z^7+7/z^7-16+z+1/z)*q^7-4*Pi^2*(9*z^9+9/z^9+27*z^27+27/z^27-80+z+1/z+3*z^3+3/z^3)*q^27-4*Pi^2*(7*z^7+7/z^7+14*z^14+14/z^14-48+z+1/z+2*z^2+2/z^2)*q^14-4*Pi^2*(2*z^2+2/z^2+3*z^3+3/z^3+6*z^6+6/z^6-24+z+1/z)*q^6-4*Pi^2*(5*z^5+5/z^5+15*z^15+15/z^15-48+z+1/z+3*z^3+3/z^3)*q^15-4*Pi^2*(31*z^31+31/z^31-64+z+1/z)*q^31-4*Pi^2*(16*z^16+16/z^16+32*z^32+32/z^32-126+z+1/z+2*z^2+2/z^2+4*z^4+4/z^4+8*z^8+8/z^8)*q^32-4*Pi^2*(33*z^33+33/z^33+z+1/z-96+3*z^3+3/z^3+11*z^11+11/z^11)*q^33-4*Pi^2*(2*z^2+2/z^2+17*z^17+17/z^17+34*z^34+34/z^34+z+1/z-108)*q^34-4*Pi^2*(35*z^35+35/z^35-96+z+1/z+5*z^5+5/z^5+7*z^7+7/z^7)*q^35-4*Pi^2*(2*z^2+2/z^2+18*z^18+18/z^18+36*z^36+36/z^36-182+z+1/z+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+9*z^9+9/z^9+12*z^12+12/z^12)*q^36-4*Pi^2*(-504+z+96*z^96+96/z^96+48*z^48+48/z^48+24*z^24+24/z^24+32*z^32+32/z^32+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+8*z^8+8/z^8+12*z^12+12/z^12+16*z^16+16/z^16)*q^96-4*Pi^2*(97*z^97+97/z^97-196+z+1/z)*q^97-4*Pi^2*(49*z^49+49/z^49+98*z^98+98/z^98+z+1/z-342+2*z^2+2/z^2+7*z^7+7/z^7+14*z^14+14/z^14)*q^98-4*Pi^2*(99*z^99+99/z^99-312+z+1/z+3*z^3+3/z^3+9*z^9+9/z^9+11*z^11+11/z^11+33*z^33+33/z^33)*q^99-4*Pi^2*(5*z^5+5/z^5+50*z^50+50/z^50+100*z^100+100/z^100+4*z^4+4/z^4+z+1/z-434+2*z^2+2/z^2+10*z^10+10/z^10+20*z^20+20/z^20+25*z^25+25/z^25)*q^100-4*Pi^2*(101*z^101+101/z^101+z+1/z-204)*q^101-4*Pi^2*(6*z^6+6/z^6+51*z^51+51/z^51+102*z^102+102/z^102+z+1/z+3*z^3+3/z^3-432+2*z^2+2/z^2+17*z^17+17/z^17+34*z^34+34/z^34)*q^102-4*Pi^2*(103*z^103+103/z^103-208+z+1/z)*q^103-4*Pi^2*(52*z^52+52/z^52+104*z^104+104/z^104-420+4*z^4+4/z^4+z+1/z+2*z^2+2/z^2+8*z^8+8/z^8+13*z^13+13/z^13+26*z^26+26/z^26)*q^104-4*Pi^2*(105*z^105+105/z^105+5*z^5+5/z^5-384+z+1/z+3*z^3+3/z^3+7*z^7+7/z^7+15*z^15+15/z^15+21*z^21+21/z^21+35*z^35+35/z^35)*q^105-4*Pi^2*(53*z^53+53/z^53+106*z^106+106/z^106+z+1/z-324+2*z^2+2/z^2)*q^106-4*Pi^2*(107*z^107+107/z^107-216+z+1/z)*q^107-4*Pi^2*(-560+z+108*z^108+108/z^108+54*z^54+54/z^54+27*z^27+27/z^27+36*z^36+36/z^36+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+6*z^6+6/z^6+9*z^9+9/z^9+12*z^12+12/z^12+18*z^18+18/z^18)*q^108-4*Pi^2*(109*z^109+109/z^109-220+z+1/z)*q^109-4*Pi^2*(55*z^55+55/z^55+110*z^110+110/z^110+5*z^5+5/z^5-432+2*z^2+2/z^2+z+1/z+10*z^10+10/z^10+11*z^11+11/z^11+22*z^22+22/z^22)*q^110-4*Pi^2*(111*z^111+111/z^111+z+1/z-304+3*z^3+3/z^3+37*z^37+37/z^37)*q^111-4*Pi^2*(56*z^56+56/z^56+112*z^112+112/z^112+4*z^4+4/z^4-496+2*z^2+2/z^2+z+1/z+7*z^7+7/z^7+8*z^8+8/z^8+14*z^14+14/z^14+16*z^16+16/z^16+28*z^28+28/z^28)*q^112-4*Pi^2*(113*z^113+113/z^113+z+1/z-228)*q^113-4*Pi^2*(6*z^6+6/z^6+57*z^57+57/z^57+114*z^114+114/z^114-480+3*z^3+3/z^3+z+1/z+2*z^2+2/z^2+19*z^19+19/z^19+38*z^38+38/z^38)*q^114-4*Pi^2*(115*z^115+115/z^115+5*z^5+5/z^5-288+z+1/z+23*z^23+23/z^23)*q^115-4*Pi^2*(58*z^58+58/z^58+116*z^116+116/z^116+4*z^4+4/z^4-420+2*z^2+2/z^2+z+1/z+29*z^29+29/z^29)*q^116-4*Pi^2*(117*z^117+117/z^117-364+3*z^3+3/z^3+z+1/z+9*z^9+9/z^9+13*z^13+13/z^13+39*z^39+39/z^39)*q^117-4*Pi^2*(59*z^59+59/z^59+118*z^118+118/z^118+z+1/z-360+2*z^2+2/z^2)*q^118-4*Pi^2*(7*z^7+7/z^7+119*z^119+119/z^119-288+z+1/z+17*z^17+17/z^17)*q^119-4*Pi^2*(-720+z+120*z^120+120/z^120+60*z^60+60/z^60+40*z^40+40/z^40+20*z^20+20/z^20+24*z^24+24/z^24+30*z^30+30/z^30+1/z+2*z^2+2/z^2+3*z^3+3/z^3+4*z^4+4/z^4+5*z^5+5/z^5+6*z^6+6/z^6+8*z^8+8/z^8+10*z^10+10/z^10+12*z^12+12/z^12+15*z^15+15/z^15)*q^120-4*Pi^2*(121*z^121+121/z^121-266+z+1/z+11*z^11+11/z^11)*q^121-4*Pi^2*(61*z^61+61/z^61+122*z^122+122/z^122+2*z^2+2/z^2-372+z+1/z)*q^122-4*Pi^2*(123*z^123+123/z^123-336+z+1/z+3*z^3+3/z^3+41*z^41+41/z^41)*q^123-4*Pi^2*(62*z^62+62/z^62+124*z^124+124/z^124-448+z+1/z+4*z^4+4/z^4+2*z^2+2/z^2+31*z^31+31/z^31)*q^124-4*Pi^2*(125*z^125+125/z^125+5*z^5+5/z^5-312+z+1/z+25*z^25+25/z^25)*q^125-4*Pi^2*(-624+z+126*z^126+126/z^126+63*z^63+63/z^63+42*z^42+42/z^42+21*z^21+21/z^21+1/z+2*z^2+2/z^2+3*z^3+3/z^3+6*z^6+6/z^6+7*z^7+7/z^7+9*z^9+9/z^9+14*z^14+14/z^14+18*z^18+18/z^18)*q^126-4*Pi^2*(127*z^127+127/z^127-256+z+1/z)*q^127:
> pp1:=(z,q)->-(8*I)*Pi^3*(-1681/z^41+9*z^3+z+15129*z^123-9/z^3-15129/z^123-1/z+1681*z^41)*q^123-(8*I)*Pi^3*(-9/z^3+256*z^16-4/z^2+9*z^3-256/z^16+16*z^4+144*z^12-1/z-64/z^8+36*z^6+4*z^2+z-2304/z^48+576*z^24+2304*z^48-576/z^24-144/z^12-16/z^4+64*z^8-36/z^6)*q^48-(8*I)*Pi^3*(z-2209/z^47-1/z+2209*z^47)*q^47-(8*I)*Pi^3*(529*z^23+2116*z^46-1/z+4*z^2-2116/z^46-4/z^2+z-529/z^23)*q^46-(8*I)*Pi^3*(-9/z^3+25*z^5-81/z^9+z-25/z^5+2025*z^45-1/z+81*z^9+225*z^15-225/z^15+9*z^3-2025/z^45)*q^45-(8*I)*Pi^3*(-3721/z^61+z-14884/z^122-4/z^2+3721*z^61+4*z^2+14884*z^122-1/z)*q^122-(8*I)*Pi^3*(-441/z^21-16/z^4+441*z^21-784/z^28+784*z^28+7056*z^84-196/z^14-4/z^2+16*z^4+9*z^3-1764/z^42+4*z^2+36*z^6-36/z^6+1764*z^42-9/z^3-7056/z^84+49*z^7+z-144/z^12-49/z^7+196*z^14+144*z^12-1/z)*q^84-(8*I)*Pi^3*(z-6889/z^83-1/z+6889*z^83)*q^83-(8*I)*Pi^3*(4*z^2-4/z^2+z-1681/z^41+1681*z^41-1/z-6724/z^82+6724*z^82)*q^82-(8*I)*Pi^3*(-16/z^4+z+4*z^2+1936*z^44-121/z^11-1936/z^44-1/z+484*z^22-4/z^2+121*z^11+16*z^4-484/z^22)*q^44-(8*I)*Pi^3*(-1849/z^43+1849*z^43-1/z+z)*q^43-(8*I)*Pi^3*(441*z^21-36/z^6+9*z^3+4*z^2+1764*z^42-9/z^3-1/z-1764/z^42-196/z^14-441/z^21+z-4/z^2+196*z^14+36*z^6-49/z^7+49*z^7)*q^42-(8*I)*Pi^3*(81*z^9+9*z^3+z+729*z^27-9/z^3-1/z-81/z^9+6561*z^81-729/z^27-6561/z^81)*q^81-(8*I)*Pi^3*(3136*z^56+16*z^4-49/z^7-196/z^14+12544*z^112-1/z+z+64*z^8-3136/z^56+256*z^16-12544/z^112-16/z^4+784*z^28-4/z^2-784/z^28+4*z^2-256/z^16+196*z^14-64/z^8+49*z^7)*q^112-(8*I)*Pi^3*(-9/z^3+z+9*z^3-1369/z^37+1369*z^37+12321*z^111-12321/z^111-1/z)*q^111-(8*I)*Pi^3*(3025*z^55+z-100/z^10-484/z^22+25*z^5+4*z^2-3025/z^55-25/z^5+484*z^22+100*z^10-121/z^11-4/z^2+121*z^11-12100/z^110+12100*z^110-1/z)*q^110-(8*I)*Pi^3*(-4489/z^67-17956/z^134+17956*z^134-4/z^2+z-1/z+4*z^2+4489*z^67)*q^134-(8*I)*Pi^3*(z+49*z^7+361*z^19-17689/z^133-49/z^7-1/z-361/z^19+17689*z^133)*q^133-(8*I)*Pi^3*(-36/z^6+121*z^11-9/z^3+4356*z^66+36*z^6-4356/z^66+4*z^2-121/z^11+9*z^3+484*z^22-484/z^22-1089/z^33-4/z^2-1/z+1089*z^33+z)*q^66-(8*I)*Pi^3*(-4225/z^65-25/z^5+4225*z^65-1/z+z-169/z^13+169*z^13+25*z^5)*q^65-(8*I)*Pi^3*(-4/z^2+16*z^4-256/z^16+4096*z^64+4*z^2-1/z-4096/z^64+256*z^16+1024*z^32-1024/z^32-64/z^8+z+64*z^8-16/z^4)*q^64-(8*I)*Pi^3*(49*z^7+z-441/z^21+9*z^3-81/z^9-49/z^7+441*z^21-1/z-9/z^3+81*z^9-3969/z^63+3969*z^63)*q^63-(8*I)*Pi^3*(z-3844/z^62+961*z^31-961/z^31-4/z^2+3844*z^62+4*z^2-1/z)*q^62-(8*I)*Pi^3*(121*z^11-9801/z^99-9/z^3+9*z^3+z-1089/z^33-81/z^9+1089*z^33-121/z^11+81*z^9+9801*z^99-1/z)*q^99-(8*I)*Pi^3*(-1/z-196/z^14+49*z^7+9604*z^98+196*z^14+4*z^2-4/z^2+z-9604/z^98-2401/z^49+2401*z^49-49/z^7)*q^98-(8*I)*Pi^3*(-1/z+z-9409/z^97+9409*z^97)*q^97-(8*I)*Pi^3*(2304*z^48+4*z^2-36/z^6-144/z^12-256/z^16-9/z^3-576/z^24+576*z^24+9*z^3-1/z-1024/z^32+z-64/z^8+256*z^16+1024*z^32-2304/z^48+64*z^8-16/z^4-4/z^2-9216/z^96+36*z^6+144*z^12+9216*z^96+16*z^4)*q^96-(8*I)*Pi^3*(400*z^20-4/z^2+4*z^2-1/z+z-100/z^10+100*z^10-16/z^4+16*z^4-25/z^5-400/z^20+25*z^5)*q^20-(8*I)*Pi^3*(-1/z+361*z^19+z-361/z^19)*q^19-(8*I)*Pi^3*(81*z^9+4*z^2+324*z^18+36*z^6-81/z^9-36/z^6-1/z-324/z^18-9/z^3+9*z^3-4/z^2+z)*q^18-(8*I)*Pi^3*(z+289*z^17-289/z^17-1/z)*q^17-(8*I)*Pi^3*(4*z^2-64/z^8+64*z^8-1/z-16/z^4-4/z^2+256*z^16+z+16*z^4-256/z^16)*q^16-(8*I)*Pi^3*(-225/z^15-9/z^3+z+25*z^5-25/z^5+9*z^3+225*z^15-1/z)*q^15-(8*I)*Pi^3*(169*z^13-1/z-169/z^13+z)*q^13-(8*I)*Pi^3*(-4/z^2+49*z^7-49/z^7-196/z^14+z-1/z+4*z^2+196*z^14)*q^14-(8*I)*Pi^3*(36*z^6+9*z^3-16/z^4-1/z+z-4/z^2-9/z^3+16*z^4-36/z^6+4*z^2+144*z^12-144/z^12)*q^12-(8*I)*Pi^3*(-100/z^10-1/z-25/z^5-4/z^2+25*z^5+100*z^10+z+4*z^2)*q^10-(8*I)*Pi^3*(-121/z^11+z-1/z+121*z^11)*q^11-(8*I)*Pi^3*(16*z^4-16/z^4+64*z^8+z-1/z-64/z^8+4*z^2-4/z^2)*q^8-(8*I)*Pi^3*(9*z^3-81/z^9+z+81*z^9-9/z^3-1/z)*q^9-(8*I)*Pi^3*(z-25/z^5+25*z^5-1/z)*q^5-(8*I)*Pi^3*(9*z^3+4*z^2-36/z^6-9/z^3-1/z+z-4/z^2+36*z^6)*q^6-(8*I)*Pi^3*(z+49*z^7-1/z-49/z^7)*q^7-(8*I)*Pi^3*(-1/z+z)*q-(8*I)*Pi^3*(-4/z^2+z-1/z+4*z^2)*q^2-(8*I)*Pi^3*(-9/z^3-1/z+9*z^3+z)*q^3-(8*I)*Pi^3*(z-1/z-16/z^4-4/z^2+16*z^4+4*z^2)*q^4-(8*I)*Pi^3*(-2704/z^52+676*z^26+4*z^2-676/z^26-24336/z^156+1521*z^39-1521/z^39-144/z^12+24336*z^156-36/z^6+6084*z^78-169/z^13-16/z^4+144*z^12+169*z^13+2704*z^52-6084/z^78+9*z^3-1/z-4/z^2+z+36*z^6+16*z^4-9/z^3)*q^156-(8*I)*Pi^3*(z+25*z^5+961*z^31-1/z-961/z^31+24025*z^155-24025/z^155-25/z^5)*q^155-(8*I)*Pi^3*(5929*z^77-121/z^11+4*z^2-5929/z^77-484/z^22-196/z^14-49/z^7+484*z^22-23716/z^154-1/z+z-4/z^2+49*z^7+23716*z^154+196*z^14+121*z^11)*q^154-(8*I)*Pi^3*(-16/z^4-1/z+26896*z^164-4/z^2+6724*z^82+4*z^2+16*z^4-1681/z^41-6724/z^82+z+1681*z^41-26896/z^164)*q^164-(8*I)*Pi^3*(z-26569/z^163-1/z+26569*z^163)*q^163-(8*I)*Pi^3*(z+20736*z^144-20736/z^144+5184*z^72-5184/z^72+2304*z^48-2304/z^48+576*z^24-576/z^24+1296*z^36-1296/z^36-1/z+4*z^2-4/z^2+9*z^3-9/z^3+16*z^4-16/z^4+36*z^6-36/z^6+64*z^8-64/z^8+81*z^9-81/z^9+144*z^12-144/z^12+256*z^16-256/z^16+324*z^18-324/z^18)*q^144-(8*I)*Pi^3*(-20449/z^143-121/z^11+169*z^13+z+20449*z^143-1/z+121*z^11-169/z^13)*q^143-(8*I)*Pi^3*(11881*z^109+z-1/z-11881/z^109)*q^109-(8*I)*Pi^3*(4*z^2+16*z^4+2916*z^54+36*z^6+81*z^9+9*z^3-1296/z^36-9/z^3+1296*z^36-2916/z^54+729*z^27-16/z^4+11664*z^108-1/z-324/z^18-144/z^12-36/z^6-11664/z^108+z+324*z^18-81/z^9-729/z^27-4/z^2+144*z^12)*q^108-(8*I)*Pi^3*(z-11449/z^107-1/z+11449*z^107)*q^107-(8*I)*Pi^3*(256*z^16+64*z^8+z-1600/z^40+1600*z^40-4/z^2-1/z+400*z^20-100/z^10+6400*z^80-16/z^4-400/z^20-25/z^5-6400/z^80+25*z^5-256/z^16+100*z^10+16*z^4+4*z^2-64/z^8)*q^80-(8*I)*Pi^3*(-6241/z^79+z+6241*z^79-1/z)*q^79-(8*I)*Pi^3*(-169/z^13+4*z^2-1521/z^39-36/z^6-4/z^2-9/z^3-676/z^26+676*z^26+9*z^3-1/z-6084/z^78+z+6084*z^78+1521*z^39+169*z^13+36*z^6)*q^78-(8*I)*Pi^3*(z-1/z+121*z^11+5929*z^77-5929/z^77-121/z^11+49*z^7-49/z^7)*q^77-(8*I)*Pi^3*(-361/z^19-16/z^4+5776*z^76-4/z^2-1444/z^38+1444*z^38+361*z^19+4*z^2-5776/z^76+16*z^4-1/z+z)*q^76-(8*I)*Pi^3*(-1/z+2809*z^53+4*z^2-2809/z^53+z-4/z^2+11236*z^106-11236/z^106)*q^106-(8*I)*Pi^3*(-1/z-121/z^11+121*z^11+z-14641/z^121+14641*z^121)*q^121-(8*I)*Pi^3*(z+14400*z^120-14400/z^120+3600*z^60-3600/z^60+1600*z^40-1600/z^40+400*z^20-400/z^20+576*z^24-576/z^24+900*z^30-900/z^30-1/z+4*z^2-4/z^2+9*z^3-9/z^3+16*z^4-16/z^4+25*z^5-25/z^5+36*z^6-36/z^6+64*z^8-64/z^8+100*z^10-100/z^10+144*z^12-144/z^12+225*z^15-225/z^15)*q^120-(8*I)*Pi^3*(361*z^19-1/z+z-25/z^5+25*z^5-361/z^19+9025*z^95-9025/z^95)*q^95-(8*I)*Pi^3*(-14161/z^119-289/z^17+z-1/z+14161*z^119-49/z^7+289*z^17+49*z^7)*q^119-(8*I)*Pi^3*(4*z^2+z+8836*z^94+2209*z^47-2209/z^47-4/z^2-1/z-8836/z^94)*q^94-(8*I)*Pi^3*(961*z^31-961/z^31-1/z+9*z^3-8649/z^93+z+8649*z^93-9/z^3)*q^93-(8*I)*Pi^3*z*(1+z)/(1-z)^3-(8*I)*Pi^3*(-81/z^9-289/z^17-1/z+81*z^9+289*z^17-9/z^3-23409/z^153+9*z^3+23409*z^153-2601/z^51+2601*z^51+z)*q^153-(8*I)*Pi^3*(z-23104/z^152-64/z^8+4*z^2+5776*z^76+23104*z^152-361/z^19+16*z^4+64*z^8-5776/z^76-16/z^4-1/z-4/z^2-1444/z^38+1444*z^38+361*z^19)*q^152-(8*I)*Pi^3*(-1/z+3721*z^61-3721/z^61+z)*q^61-(8*I)*Pi^3*(144*z^12-9/z^3+4*z^2-36/z^6-25/z^5+900*z^30-225/z^15+100*z^10+36*z^6-1/z+z-16/z^4+3600*z^60-3600/z^60+25*z^5+16*z^4-900/z^30+225*z^15-400/z^20-4/z^2+9*z^3-100/z^10-144/z^12+400*z^20)*q^60-(8*I)*Pi^3*(-3481/z^59+z+3481*z^59-1/z)*q^59-(8*I)*Pi^3*(-1936/z^44+121*z^11-484/z^22+4356*z^66+9*z^3-36/z^6+36*z^6-121/z^11-9/z^3+484*z^22-4356/z^66-16/z^4-144/z^12+144*z^12+16*z^4-1089/z^33-17424/z^132-1/z+1089*z^33+1936*z^44+z+4*z^2-4/z^2+17424*z^132)*q^132-(8*I)*Pi^3*(z-1/z+17161*z^131-17161/z^131)*q^131-(8*I)*Pi^3*(-3364/z^58-841/z^29+z-4/z^2+4*z^2-1/z+841*z^29+3364*z^58)*q^58-(8*I)*Pi^3*(9*z^3-3249/z^57-1/z-9/z^3+361*z^19+z-361/z^19+3249*z^57)*q^57-(8*I)*Pi^3*(-784/z^28+4*z^2-49/z^7-3136/z^56-4/z^2+784*z^28+3136*z^56+16*z^4-196/z^14+196*z^14+49*z^7-16/z^4+64*z^8-1/z-64/z^8+z)*q^56-(8*I)*Pi^3*(-169/z^13-25/z^5+676*z^26-16900/z^130-4/z^2+4*z^2-1/z+169*z^13-100/z^10+4225*z^65+z+16900*z^130+100*z^10-4225/z^65+25*z^5-676/z^26)*q^130-(8*I)*Pi^3*(z+1681*z^41-1681/z^41-1/z)*q^41-(8*I)*Pi^3*(4*z^2+25*z^5-1600/z^40-64/z^8+16*z^4-1/z-4/z^2+z-16/z^4+1600*z^40+64*z^8+400*z^20-100/z^10-400/z^20-25/z^5+100*z^10)*q^40-(8*I)*Pi^3*(-1521/z^39+9*z^3-169/z^13+z-1/z-9/z^3+1521*z^39+169*z^13)*q^39-(8*I)*Pi^3*(-361/z^19-1/z+z-4/z^2+4*z^2+361*z^19+1444*z^38-1444/z^38)*q^38-(8*I)*Pi^3*(z+1369*z^37-1369/z^37-1/z)*q^37-(8*I)*Pi^3*(1296*z^36-4/z^2-9/z^3+36*z^6-144/z^12+z+324*z^18-16/z^4+16*z^4-1296/z^36-1/z+81*z^9-36/z^6-81/z^9+144*z^12+4*z^2+9*z^3-324/z^18)*q^36-(8*I)*Pi^3*(25*z^5-1/z-49/z^7+1225*z^35+z-25/z^5+49*z^7-1225/z^35)*q^35-(8*I)*Pi^3*(z+1156*z^34+4*z^2-1/z+289*z^17-4/z^2-289/z^17-1156/z^34)*q^34-(8*I)*Pi^3*(-121/z^11+z-9/z^3+121*z^11+9*z^3-1089/z^33+1089*z^33-1/z)*q^33-(8*I)*Pi^3*(-729/z^27-36/z^6+81*z^9-324/z^18+36*z^6+6561*z^81+26244*z^162+9*z^3-81/z^9+729*z^27+2916*z^54-1/z+z-6561/z^81-26244/z^162+4*z^2+324*z^18-9/z^3-4/z^2-2916/z^54)*q^162-(8*I)*Pi^3*(-529/z^23-25921/z^161+49*z^7+529*z^23-1/z+z-49/z^7+25921*z^161)*q^161-(8*I)*Pi^3*(225*z^15+25*z^5+625*z^25-25/z^5-625/z^25-9/z^3+z+5625*z^75-1/z-225/z^15+9*z^3-5625/z^75)*q^75-(8*I)*Pi^3*(-5476/z^74-4/z^2+4*z^2+1369*z^37+z-1369/z^37+5476*z^74-1/z)*q^74-(8*I)*Pi^3*(5329*z^73-5329/z^73+z-1/z)*q^73-(8*I)*Pi^3*(z+5184*z^72+324*z^18+144*z^12+1296*z^36-1296/z^36-16/z^4-324/z^18-9/z^3-64/z^8-1/z-144/z^12+64*z^8+36*z^6-576/z^24-4/z^2-5184/z^72+576*z^24+16*z^4-81/z^9-36/z^6+4*z^2+9*z^3+81*z^9)*q^72-(8*I)*Pi^3*(-3481/z^59+z+3481*z^59-1/z+13924*z^118-4/z^2-13924/z^118+4*z^2)*q^118-(8*I)*Pi^3*(1521*z^39-1521/z^39-169/z^13-13689/z^117-9/z^3+169*z^13-81/z^9+z-1/z+13689*z^117+81*z^9+9*z^3)*q^117-(8*I)*Pi^3*(3364*z^58-16/z^4+16*z^4+841*z^29-13456/z^116-1/z+13456*z^116-4/z^2+4*z^2-3364/z^58-841/z^29+z)*q^116-(8*I)*Pi^3*(-225/z^15+1225*z^35+49*z^7+25*z^5-11025/z^105-441/z^21-25/z^5-49/z^7-1225/z^35+z+11025*z^105-1/z+441*z^21+9*z^3+225*z^15-9/z^3)*q^105-(8*I)*Pi^3*(-16/z^4+169*z^13-676/z^26-2704/z^52+2704*z^52-10816/z^104+4*z^2-4/z^2+64*z^8-1/z-64/z^8+676*z^26+16*z^4+z+10816*z^104-169/z^13)*q^104-(8*I)*Pi^3*(-1/z-10609/z^103+10609*z^103+z)*q^103-(8*I)*Pi^3*(20164*z^142-20164/z^142+5041*z^71+z-5041/z^71+4*z^2-4/z^2-1/z)*q^142-(8*I)*Pi^3*(-16641/z^129+1849*z^43-9/z^3+9*z^3+z-1849/z^43+16641*z^129-1/z)*q^129-(8*I)*Pi^3*(-2209/z^47-19881/z^141-1/z-9/z^3+19881*z^141+9*z^3+z+2209*z^47)*q^141-(8*I)*Pi^3*(400*z^20-49/z^7-16/z^4-4/z^2-100/z^10-25/z^5+25*z^5+z-19600/z^140+196*z^14-1225/z^35-784/z^28+784*z^28+49*z^7+4*z^2-400/z^20+100*z^10+4900*z^70-196/z^14-4900/z^70+19600*z^140+1225*z^35+16*z^4-1/z)*q^140-(8*I)*Pi^3*(64*z^8+4096*z^64+4*z^2+z+256*z^16+1024*z^32-16/z^4+16*z^4-256/z^16-1/z-16384/z^128-4096/z^64+16384*z^128-64/z^8-4/z^2-1024/z^32)*q^128-(8*I)*Pi^3*(-1/z+z-16129/z^127+16129*z^127)*q^127-(8*I)*Pi^3*(4*z^2-16/z^4-1/z+529*z^23+z-8464/z^92+16*z^4+2116*z^46-529/z^23+8464*z^92-2116/z^46-4/z^2)*q^92-(8*I)*Pi^3*(-8281/z^91-1/z+z+8281*z^91+169*z^13+49*z^7-169/z^13-49/z^7)*q^91-(8*I)*Pi^3*(-36/z^6+9*z^3+81*z^9-900/z^30-9/z^3-2025/z^45+100*z^10+4*z^2-324/z^18+900*z^30-225/z^15+25*z^5-8100/z^90+324*z^18-100/z^10+8100*z^90+36*z^6-81/z^9-4/z^2+z-25/z^5+2025*z^45-1/z+225*z^15)*q^90-(8*I)*Pi^3*(-7921/z^89+7921*z^89+z-1/z)*q^89-(8*I)*Pi^3*(22801*z^151+z-22801/z^151-1/z)*q^151-(8*I)*Pi^3*(9*z^3+22500*z^150+z-625/z^25-9/z^3+625*z^25+225*z^15+100*z^10-36/z^6-22500/z^150-1/z-2500/z^50+5625*z^75-5625/z^75-100/z^10+2500*z^50-900/z^30-25/z^5+25*z^5-225/z^15+900*z^30-4/z^2+36*z^6+4*z^2)*q^150-(8*I)*Pi^3*(-1/z-25/z^5+25*z^5+3025*z^55+z-3025/z^55+121*z^11-121/z^11)*q^55-(8*I)*Pi^3*(324*z^18-9/z^3+36*z^6+2916*z^54+4*z^2-2916/z^54-36/z^6-4/z^2+z+729*z^27-324/z^18-729/z^27+9*z^3-81/z^9+81*z^9-1/z)*q^54-(8*I)*Pi^3*(-1/z-2809/z^53+z+2809*z^53)*q^53-(8*I)*Pi^3*(-169/z^13+z-1/z+4*z^2+16*z^4-4/z^2+2704*z^52+676*z^26-676/z^26+169*z^13-16/z^4-2704/z^52)*q^52-(8*I)*Pi^3*(z+2601*z^51+289*z^17-1/z+9*z^3-9/z^3-2601/z^51-289/z^17)*q^51-(8*I)*Pi^3*(z-25/z^5+25*z^5+625*z^25+2500*z^50-625/z^25+4*z^2-1/z-2500/z^50+100*z^10-100/z^10-4/z^2)*q^50-(8*I)*Pi^3*(z+49*z^7-49/z^7+2401*z^49-2401/z^49-1/z)*q^49-(8*I)*Pi^3*(-256/z^16+1024*z^32+4*z^2-16/z^4+z-1024/z^32+16*z^4+256*z^16-64/z^8-4/z^2+64*z^8-1/z)*q^32-(8*I)*Pi^3*(961*z^31-961/z^31-1/z+z)*q^31-(8*I)*Pi^3*(100*z^10+900*z^30-900/z^30-100/z^10+z-1/z+36*z^6-25/z^5-225/z^15+9*z^3+25*z^5-36/z^6-9/z^3+225*z^15-4/z^2+4*z^2)*q^30-(8*I)*Pi^3*(-1/z+z-841/z^29+841*z^29)*q^29-(8*I)*Pi^3*(-4/z^2-784/z^28-1/z-16/z^4-49/z^7+196*z^14+4*z^2-196/z^14+16*z^4+784*z^28+z+49*z^7)*q^28-(8*I)*Pi^3*(9*z^3+81*z^9-729/z^27-9/z^3+z-1/z-81/z^9+729*z^27)*q^27-(8*I)*Pi^3*(676*z^26-169/z^13-1/z+z-4/z^2-676/z^26+4*z^2+169*z^13)*q^26-(8*I)*Pi^3*(-1/z-25/z^5+z-625/z^25+625*z^25+25*z^5)*q^25-(8*I)*Pi^3*(64*z^8+9*z^3-1/z+576*z^24-4/z^2-576/z^24+36*z^6-144/z^12+z-9/z^3-36/z^6-64/z^8+144*z^12+4*z^2-16/z^4+16*z^4)*q^24-(8*I)*Pi^3*(-1/z-529/z^23+529*z^23+z)*q^23-(8*I)*Pi^3*(-4/z^2+484*z^22-121/z^11+121*z^11+4*z^2-1/z+z-484/z^22)*q^22-(8*I)*Pi^3*(441*z^21-49/z^7-9/z^3-1/z+z+9*z^3+49*z^7-441/z^21)*q^21-(8*I)*Pi^3*(9*z^3-289/z^17+4*z^2-1156/z^34+2601*z^51+1156*z^34-36/z^6-2601/z^51+z-1/z-10404/z^102+10404*z^102-4/z^2+289*z^17+36*z^6-9/z^3)*q^102-(8*I)*Pi^3*(-10201/z^101+10201*z^101-1/z+z)*q^101-(8*I)*Pi^3*(-10000/z^100-100/z^10-4/z^2+25*z^5-2500/z^50+625*z^25+100*z^10-625/z^25+400*z^20+z+10000*z^100+16*z^4+4*z^2-400/z^20-1/z+2500*z^50-16/z^4-25/z^5)*q^100-(8*I)*Pi^3*(z-25/z^5-1/z+25*z^5+529*z^23-13225/z^115-529/z^23+13225*z^115)*q^115-(8*I)*Pi^3*(-4/z^2-9/z^3-12996/z^114+1444*z^38+361*z^19+9*z^3-1444/z^38-1/z+3249*z^57+36*z^6+4*z^2-3249/z^57-36/z^6-361/z^19+z+12996*z^114)*q^114-(8*I)*Pi^3*(-1/z-12769/z^113+12769*z^113+z)*q^113-(8*I)*Pi^3*(-19321/z^139+z-1/z+19321*z^139)*q^139-(8*I)*Pi^3*(-1/z-4/z^2+4*z^2+529*z^23-529/z^23+36*z^6-19044/z^138+9*z^3-36/z^6+z-9/z^3-2116/z^46+2116*z^46-4761/z^69+19044*z^138+4761*z^69)*q^138-(8*I)*Pi^3*(-400/z^20+25*z^5+16*z^4-256/z^16-1/z+100*z^10-64/z^8+z+256*z^16+1024*z^32-25600/z^160-25/z^5+6400*z^80-16/z^4+25600*z^160-6400/z^80+1600*z^40-4/z^2+400*z^20-1600/z^40+4*z^2-100/z^10-1024/z^32+64*z^8)*q^160-(8*I)*Pi^3*(-25281/z^159+z+9*z^3-1/z+2809*z^53-2809/z^53+25281*z^159-9/z^3)*q^159-(8*I)*Pi^3*(-64/z^8+z+484*z^22-484/z^22-4/z^2-1/z+7744*z^88-16/z^4+64*z^8+1936*z^44+121*z^11-121/z^11+16*z^4+4*z^2-7744/z^88-1936/z^44)*q^88-(8*I)*Pi^3*(-841/z^29+9*z^3-9/z^3+z+841*z^29-1/z-7569/z^87+7569*z^87)*q^87-(8*I)*Pi^3*(-4/z^2+1849*z^43+z-1849/z^43-7396/z^86-1/z+4*z^2+7396*z^86)*q^86-(8*I)*Pi^3*(-25/z^5+7225*z^85-1/z-289/z^17+25*z^5+z+289*z^17-7225/z^85)*q^85-(8*I)*Pi^3*(-1/z-4/z^2-81/z^9-9/z^3-36/z^6+49*z^7+1764*z^42+324*z^18+196*z^14-441/z^21+441*z^21+15876*z^126-196/z^14+4*z^2-1764/z^42-324/z^18+36*z^6-3969/z^63+9*z^3+81*z^9+3969*z^63-49/z^7+z-15876/z^126)*q^126-(8*I)*Pi^3*(-25/z^5+25*z^5+z+15625*z^125-625/z^25+625*z^25-1/z-15625/z^125)*q^125-(8*I)*Pi^3*(-1/z+15376*z^124+4*z^2+3844*z^62+16*z^4+961*z^31-961/z^31+z-4/z^2-15376/z^124-3844/z^62-16/z^4)*q^124-(8*I)*Pi^3*(z-1/z-5041/z^71+5041*z^71)*q^71-(8*I)*Pi^3*(-1225/z^35+49*z^7+196*z^14-100/z^10-4/z^2-1/z+z+25*z^5-25/z^5-196/z^14+4*z^2+4900*z^70+100*z^10+1225*z^35-49/z^7-4900/z^70)*q^70-(8*I)*Pi^3*(z+9*z^3-4761/z^69-1/z+4761*z^69-9/z^3-529/z^23+529*z^23)*q^69-(8*I)*Pi^3*(4624*z^68+16*z^4-4/z^2+z-16/z^4+289*z^17-1/z+1156*z^34+4*z^2-4624/z^68-289/z^17-1156/z^34)*q^68-(8*I)*Pi^3*(-1/z+4489*z^67-4489/z^67+z)*q^67-(8*I)*Pi^3*(-22201/z^149+22201*z^149-1/z+z)*q^149-(8*I)*Pi^3*(-21904/z^148-1369/z^37+4*z^2-16/z^4+5476*z^74+1369*z^37+z+16*z^4-4/z^2-1/z-5476/z^74+21904*z^148)*q^148-(8*I)*Pi^3*(441*z^21-21609/z^147-1/z-49/z^7+21609*z^147-441/z^21+z+9*z^3+49*z^7-2401/z^49+2401*z^49-9/z^3)*q^147-(8*I)*Pi^3*(-4/z^2-6241/z^79-1/z+24964*z^158+6241*z^79+4*z^2+z-24964/z^158)*q^158-(8*I)*Pi^3*(-1/z+24649*z^157-24649/z^157+z)*q^157-(8*I)*Pi^3*(-18769/z^137+z-1/z+18769*z^137)*q^137-(8*I)*Pi^3*(-1156/z^34+16*z^4+18496*z^136+289*z^17+z-4624/z^68+1156*z^34-64/z^8+4624*z^68-1/z+64*z^8-4/z^2-16/z^4+4*z^2-18496/z^136-289/z^17)*q^136-(8*I)*Pi^3*(-18225/z^135-1/z+2025*z^45-81/z^9-25/z^5-2025/z^45+729*z^27+z+81*z^9-9/z^3-225/z^15+9*z^3+25*z^5+225*z^15+18225*z^135-729/z^27)*q^135-(8*I)*Pi^3*(5329*z^73+z+4*z^2-1/z-21316/z^146-5329/z^73+21316*z^146-4/z^2)*q^146-(8*I)*Pi^3*(6889*z^83-27556/z^166+z-1/z+27556*z^166-4/z^2+4*z^2-6889/z^83)*q^166-(8*I)*Pi^3*(121*z^11-9/z^3-1089/z^33-27225/z^165-25/z^5+3025*z^55-121/z^11+9*z^3+25*z^5-225/z^15+225*z^15-3025/z^55+1089*z^33-1/z+27225*z^165+z)*q^165-(8*I)*Pi^3*(841*z^29+25*z^5-21025/z^145+z-25/z^5-1/z-841/z^29+21025*z^145)*q^145:
> 
;
> 
;
> factor(x^26-1);
        / 12    11    10    9    8    7    6    5    4    3    2
(x - 1) \x   + x   + x   + x  + x  + x  + x  + x  + x  + x  + x 

          \         / 12    11    10    9    8    7    6    5
   + x + 1/ (1 + x) \x   - x   + x   - x  + x  - x  + x  - x 

      4    3    2        \
   + x  - x  + x  - x + 1/


;
> x:='x':
> alias(w=RootOf(x^12 - x^11 + x^10 - x^9 + x^8 - x^7 + x^6 - x^5 + x^4 - x^3 + x^2 - x + 1));
                               w

;
# 
# Finding q-expansions of generators b0:=b(tau), c0:=c(tau), and q-expansions of generators x0:=x(tau), y0:=y(tau) computed by Sutherland.

> 
;
# Finding the relation between b0, c0 and x0, y0.
> b:='b': c:='c': r:='r': s:='s': x:='x': y:='y':
> solve({c=s*(r-1), b=c*r},{r,s});
> solve({r = (x^3*y + 3*x^2*y - x^2 + x*y^2)/((x + 1)*(x^2*y + x^2 + 3*x*y + y^2)), s = (x*y - x)/(x*y + y)},{x,y});
                       /             2  \ 
                       |    b       c   | 
                      < r = -, s = ----- >
                       |    c      b - c| 
                       \                / 

             /           2            2         
             |        r s  - 3 r s + s  + r     
            < x = - --------------------------, 
             |         2                        
             \      r s  - 3 r s + 2 r + s - 1  

                          2            2          \ 
                       r s  - 3 r s + s  + r      | 
              y = -------------------------------- >
                     2    3              2        | 
                  r s  - s  - 2 r s + 2 s  + r - s/ 


;
> x := -(r*s^2 - 3*r*s + s^2 + r)/(r*s^2 - 3*r*s + 2*r + s - 1): y := (r*s^2 - 3*r*s + s^2 + r)/(r*s^2 - s^3 - 2*r*s + 2*s^2 + r - s):
> r := b/c: s := c^2/(b-c):
> S1:=simplify(x); S2:=simplify(y);
            5      4        3   /   2    \  2      2      3
          -c  - b c  - 3 b c  + \3 b  - b/ c  + 2 b  c - b 
    S1 := -------------------------------------------------
              /    2      2            2\ /  2        \    
              \-b c  + 2 b  - 3 b c + c / \-c  + b - c/    

      / 5      4        3   /    2    \  2      2      3\        
      \c  + b c  + 3 b c  + \-3 b  + b/ c  - 2 b  c + b / (b - c)
S2 := -----------------------------------------------------------
                                                  2              
                    /  3    2      \ /  2        \               
                    \-c  + b  - b c/ \-c  + b - c/               

;
> 
;
# Computing each q-expansions of a[i,j] := b0^i*c0^j for fast computation. 
> 
;
# Finding q-expansions of b0:=b(tau), c0:=c(tau) which are generators of the function field of X_1(26).
> a:='a': b:='b': n1:=10:
> 
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+a[i]*q^i:
> od:
> for i from 0 to n1 do
> b[i]:=factor(solve(coeff(-(p1(w,q)-p1(w^2,q))^3,q,i)=coeff(tm*pp1(w,q)^2,q,i),a[i])):
> a[i]:=b[i]:
> od:
> b0:=tm:
> 
> a:='a': b:='b':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+a[i]*q^i:
> od:
> for i from 0 to n1 do
> b[i]:=factor(solve(coeff(-pp1(w^2,q),q,i)=coeff(tm*pp1(w,q),q,i),a[i])):
> a[i]:=b[i]:
> od:
> c0:=tm:
> 
> a:='a': b:='b': c:='c': 
> 
> b[1]:=b0:
> for i from 2 to 4 do
> b[i]:=0:
> for j from 0 to n1 do
> b[i]:=b[i]+factor(coeff(b[1]*b[i-1],q,j))*q^j:
> od:
> od:
> 
> c[1]:=c0:
> for i from 2 to 7 do
> c[i]:=0:
> for j from 0 to n1 do
> c[i]:=c[i]+factor(coeff(c[1]*c[i-1],q,j))*q^j:
> od:
> od:
> 
> b[0]:=1: c[0]:=1:
> for i from 0 to 4 do
> for j from 0 to 7 do
> a[i,j]:=0:
> for k from 0 to n1 do
> a[i,j]:=a[i,j]+factor(coeff(b[i]*c[j],q,k))*q^k:
> od:od:od:
> 
> txn:=-a[1,4] - a[0,5] + 3*a[2,2] - 3*a[1,3] - a[3,0] + 2*a[2,1] - a[1,2]:
> txd:=a[1,4] - 3*a[2,2] + 4*a[1,3] - a[0,4] + 2*a[3,0] - 5*a[2,1] + 4*a[1,2] - a[0,3]:
> tyn:=a[2,4] - a[0,6] - 3*a[3,2] + 6*a[2,3] - 3*a[1,4] + a[4,0] - 3*a[3,1] + 3*a[2,2] - a[1,3]:
> tyd:=-a[0,7] + a[2,4] + a[1,5] - 2*a[0,6] - 2*a[3,2] + 3*a[2,3] - a[0,5] + a[4,0] - 3*a[3,1] + 3*a[2,2] - a[1,3]:
> 
> xn:=0:
> for j from 0 to n1 do
> xn:=xn+factor(coeff(txn,q,j))*q^j:
> od:
> 
> xd:=0:
> for j from 0 to n1 do
> xd:=xd+factor(coeff(txd,q,j))*q^j:
> od:
> 
> yn:=0:
> for j from 0 to n1 do
> yn:=yn+factor(coeff(tyn,q,j))*q^j:
> od:
> 
> yd:=0:
> for j from 0 to n1 do
> yd:=yd+factor(coeff(tyd,q,j))*q^j:
> od:
> 
> a:='a': b:='b':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+a[i]*q^i:
> od:
> for i from 0 to n1 do
> b[i]:=factor(solve(simplify(coeff(xn,q,i))=simplify(coeff(tm*xd,q,i)),a[i])):
> a[i]:=b[i]:
> od:
> x0:=tm:
> 
> a:='a': b:='b':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+a[i]*q^i:
> od:
> for i from 0 to n1 do
> b[i]:=factor(solve(simplify(coeff(yn,q,i))=simplify(coeff(tm*yd,q,i)),a[i])):
> a[i]:=b[i]:
> od:
> y0:=tm:
> 
;
# Defining equation of X_1(26)
> f:=(x,y)->y^6 + (3*x^2 + 4*x - 2)*y^5 + (3*x^4 + 10*x^3 - 9*x + 1)*y^4
> +(x^6 + 7*x^5 + 8*x^4 - 14*x^3 - 11*x^2 + 6*x)*y^3
> +(x^7 + 4*x^6 - x^5 - 13*x^4 + 2*x^3 + 10*x^2 - x)*y^2
> -(x^6 - 7*x^4 - 4*x^3 + 2*x^2)*y - x^4 - x^3:
> for i from 0 to 5 do
> print(simplify(coeff(f(x0,y0),q,i)));
> od;
                               0

                               0

                               0

                               0

                               0

                               0

;
> c1:=factor(series(-(p1(q*w^20,q^2)-p1(w^14,q^2))^3/pp1(q*w^20,q^2)^2,q=0,n1));
      1  /     2   85       11   561  10   905  9   1188  8
c1 := -- |-18 w  + -- + 18 w   - --- w   + --- w  - ---- w 
       2 \         13            13        13        13    
      q                                                    

     1347  7   1347  6   1188  5   905  4   561  3\   1 /1167
   + ---- w  - ---- w  + ---- w  - --- w  + --- w | + - |----
      13        13        13       13       13    /   q \ 13 

     3242  2   16833  5   7835  3   19154  6   19154  7
   - ---- w  + ----- w  + ---- w  - ----- w  + ----- w 
      13        13         13        13         13     

     12741  9   3242  11   12741  4   16833  8   7835  10\   /     
   + ----- w  + ---- w   - ----- w  - ----- w  - ---- w  | + |1968 
      13         13         13         13         13     /   \     

   11   61518  10   99494  9          8   148497  7   148497  6
  w   - ----- w   + ----- w  - 10065 w  + ------ w  - ------ w 
         13          13                     13          13     

            5   99494  4   61518  3         2   9253\   /51695
   + 10065 w  - ----- w  + ----- w  - 1968 w  + ----| + |-----
                 13         13                   13 /   \ 13  

     143474  2   742350  5   346362  3   844135  6   844135  7
   - ------ w  + ------ w  + ------ w  - ------ w  + ------ w 
       13          13          13          13          13     

     562533  9   143474  11   562533  4   742350  8   346362  10\     
   + ------ w  + ------ w   - ------ w  - ------ w  - ------ w  | q + 
       13          13           13          13          13      /     

  /244590   676825  2   3470293  5   1628909  3   3940025  6
  |------ - ------ w  + ------- w  + ------- w  - ------- w 
  \  13       13          13           13           13      

     3940025  7   2636877  9   676825  11   2636877  4
   + ------- w  + ------- w  + ------ w   - ------- w 
       13           13           13           13      

     3470293  8   1628909  10\  2    / 3\
   - ------- w  - ------- w  | q  + O\q /
       13           13       /           


;
# 
# Computing the action on x0, y0 by W:=(W_2)^3.
# We note that b1=O(q^{-2}) and c1=O(q^{-1}).

> a:='a': b:='b':
> b1:=convert(factor(series(-(p1(q*w^20,q^2)-p1(w^14,q^2))^3/pp1(q*w^20,q^2)^2,q=0,n1)),polynom):
> c1:=convert(factor(series(-pp1(w^14,q^2)/pp1(q*w^20,q^2),q=0,n1)),polynom):
> 
> a:='a': b:='b': c:='c':
> b[1]:=b1:
> for i from 2 to 4 do
> b[i]:=0:
> for j from -8 to n1 do
> b[i]:=b[i]+factor(coeff(b[1]*b[i-1],q,j))*q^j:
> od:
> od:
> 
> c[1]:=c1:
> for i from 2 to 7 do
> c[i]:=0:
> for j from -7 to n1 do
> c[i]:=c[i]+factor(coeff(c[1]*c[i-1],q,j))*q^j:
> od:
> od:
> 
> b[0]:=1: c[0]:=1:
> for i from 0 to 4 do
> for j from 0 to 7 do
> a[i,j]:=0:
> for k from -20 to n1 do
> a[i,j]:=a[i,j]+factor(coeff(b[i]*c[j],q,k))*q^k:
> od:od:od:
> 
> txn:=-a[1,4] - a[0,5] + 3*a[2,2] - 3*a[1,3] - a[3,0] + 2*a[2,1] - a[1,2]:
> txd:=a[1,4] - 3*a[2,2] + 4*a[1,3] - a[0,4] + 2*a[3,0] - 5*a[2,1] + 4*a[1,2] - a[0,3]:
> tyn:=a[2,4] - a[0,6] - 3*a[3,2] + 6*a[2,3] - 3*a[1,4] + a[4,0] - 3*a[3,1] + 3*a[2,2] - a[1,3]:
> tyd:=-a[0,7] + a[2,4] + a[1,5] - 2*a[0,6] - 2*a[3,2] + 3*a[2,3] - a[0,5] + a[4,0] - 3*a[3,1] + 3*a[2,2] - a[1,3]:
> 
> xn:=0:
> for j from -20 to n1 do
> xn:=xn+factor(coeff(txn,q,j))*q^j:
> od:
> 
> xd:=0:
> for j from -20 to n1 do
> xd:=xd+factor(coeff(txd,q,j))*q^j:
> od:
> 
> yn:=0:
> for j from -20 to n1 do
> yn:=yn+factor(coeff(tyn,q,j))*q^j:
> od:
> 
> yd:=0:
> for j from -20 to n1 do
> yd:=yd+factor(coeff(tyd,q,j))*q^j:
> od:
> 
> x1:=convert(factor(series(xn/xd,q=0,n1)),polynom):
> y1:=convert(factor(series(yn/yd,q=0,n1)),polynom):
# 
# Computing the action on x0, y0 by W by using the relation between x0, y0 and x1, y1.

> 
;
> a:='a': b:='b': c:='c': m1:=2:
> 
> k1:=0:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> k1:=k1+1:
> else
> fi:
> od:od:
> 
> s1[0]:=1: t1[0]:=1:
> 
> s1[1]:=x0:
> for i from 2 to m1 do
> s1[i]:=0:
> for j from 0 to n1 do
> s1[i]:=s1[i]+simplify(coeff(s1[1]*s1[i-1],q,j))*q^j:
> od:
> od:
> 
> t1[1]:=y0:
> for i from 2 to m1 do
> t1[i]:=0:
> for j from 0 to n1 do
> t1[i]:=t1[i]+simplify(coeff(t1[1]*t1[i-1],q,j))*q^j:
> od:
> od:
> 
> tm1:=0:
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> tm1:=tm1+a[n]*s1[i]*t1[j]:
> n:=n+1:
> else
> fi:
> od:od:
> 
> tm2:=0:
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> tm2:=tm2+a[k1+n]*s1[i]*t1[j]:
> n:=n+1:
> else
> fi:
> od:od:
> A1:=matrix(2*k1+2,2*k1):
> for i from 1 to 2*k1+2 do
> for j from 1 to 2*k1 do
> A1[i,j]:=simplify(coeff(coeff(tm1-x1*tm2,q,i-1),a[j],1)):
> od:od:
> B1:=kernel(A1):
> fn1:=0: fd1:=0:
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> fn1:=fn1+B1[1][n]*u^i*v^j:
> n:=n+1:
> else
> fi:
> od:od:
> 
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> fd1:=fd1+B1[1][k1+n]*u^i*v^j:
> n:=n+1:
> else
> fi:
> od:od:
> factor(fn1/fd1);
> 
;
> A2:=matrix(2*k1+2,2*k1):
> for i from 1 to 2*k1+2 do
> for j from 1 to 2*k1 do
> A2[i,j]:=simplify(coeff(coeff(tm1-y1*tm2,q,i-1),a[j],1)):
> od:od:
> B2:=kernel(A2):
> 
;
> fn2:=0: fd2:=0:
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> fn2:=fn2+B2[1][n]*u^i*v^j:
> n:=n+1:
> else
> fi:
> od:od:
> 
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> fd2:=fd2+B2[1][k1+n]*u^i*v^j:
> n:=n+1:
> else
> fi:
> od:od:
> factor(fn2/fd2);
> 
;
> U1:=(u,v)->(2*u*v + v^2 - u - v)/(u^3*v + u^2*v + u*v^2 - 2*u*v - v^2 + u + v):
> V1:=(u,v)->u/(u^2 + 2*u + v):
# 
# U1(u,v), V1(u,v) define the automorphism on X_1(26): f(u,v)=0 induced by W.
# From it, we can obtain the actions on x0, y0 by W^2 and W^3.
> 
;
> s1[0]:=1: 
> s1[1]:=x1:
> for i from 2 to 3 do
> s1[i]:=0:
> for j from 0 to n1 do
> s1[i]:=s1[i]+simplify(coeff(s1[1]*s1[i-1],q,j))*q^j:
> od:
> od:
> 
> t1[0]:=1:
> t1[1]:=y1:
> for i from 2 to 3 do
> t1[i]:=0:
> for j from 0 to n1 do
> t1[i]:=t1[i]+simplify(coeff(t1[1]*t1[i-1],q,j))*q^j:
> od:
> od:
> 
> m1:=4:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> a[i,j]:=0:
> for k from 0 to n1 do
> a[i,j]:=a[i,j]+simplify(coeff(s1[i]*t1[j],q,k))*q^k:
> od:
> else
> fi:
> od:od:
> 
> sn1:=0:
> for i from 0 to n1 do
> sn1:=sn1+factor(coeff(2*a[1,1] + a[0,2] - a[1,0] - a[0,1],q,i))*q^i:
> od:
> 
> sd1:=0:
> for i from 0 to n1 do
> sd1:=sd1+factor(coeff(a[3,1] + a[2,1] + a[1,2] - 2*a[1,1] - a[0,2] + a[1,0] + a[0,1],q,i))*q^i:
> od:
> 
> b:='b': c:='c':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+b[i]*q^i:
> od:
> 
> for i from 0 to n1 do
> c[i]:=factor(solve(factor(coeff(sn1,q,i))=factor(coeff(tm*sd1,q,i)),b[i])):
> b[i]:=c[i]:
> od:
> x2:=tm:
> 
> tn1:=a[1,0]:
> 
> td1:=0:
> for i from 0 to n1 do
> td1:=td1+factor(coeff(a[2,0] + 2*a[1,0] + a[0,1],q,i))*q^i:
> od:
> 
> b:='b': c:='c':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+b[i]*q^i:
> od:
> 
> for i from 0 to n1 do
> c[i]:=factor(solve(factor(coeff(tn1,q,i))=factor(coeff(tm*td1,q,i)),b[i])):
> b[i]:=c[i]:
> od:
> y2:=tm:
> s1[0]:=1: 
> s1[1]:=x2:
> for i from 2 to 3 do
> s1[i]:=0:
> for j from 0 to n1 do
> s1[i]:=s1[i]+simplify(coeff(s1[1]*s1[i-1],q,j))*q^j:
> od:
> od:
> t1[0]:=1:
> t1[1]:=y2:
> for i from 2 to 3 do
> t1[i]:=0:
> for j from 0 to n1 do
> t1[i]:=t1[i]+simplify(coeff(t1[1]*t1[i-1],q,j))*q^j:
> od:
> od:
> 
> m1:=4:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> a[i,j]:=0:
> for k from 0 to n1 do
> a[i,j]:=a[i,j]+simplify(coeff(s1[i]*t1[j],q,k))*q^k:
> od:
> else
> fi:
> od:od:
> 
> sn1:=0:
> for i from 0 to n1 do
> sn1:=sn1+factor(coeff(2*a[1,1] + a[0,2] - a[1,0] - a[0,1],q,i))*q^i:
> od:
> 
> sd1:=0:
> for i from 0 to n1 do
> sd1:=sd1+factor(coeff(a[3,1] + a[2,1] + a[1,2] - 2*a[1,1] - a[0,2] + a[1,0] + a[0,1],q,i))*q^i:
> od:
> 
> b:='b': c:='c':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+b[i]*q^i:
> od:
> 
> for i from 0 to n1 do
> c[i]:=factor(solve(factor(coeff(sn1,q,i))=factor(coeff(tm*sd1,q,i)),b[i])):
> b[i]:=c[i]:
> od:
> x3:=tm:
> 
> tn1:=a[1,0]:
> 
> td1:=0:
> for i from 0 to n1 do
> td1:=td1+factor(coeff(a[2,0] + 2*a[1,0] + a[0,1],q,i))*q^i:
> od:
> 
> b:='b': c:='c':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+b[i]*q^i:
> od:
> 
> for i from 0 to n1 do
> c[i]:=factor(solve(factor(coeff(tn1,q,i))=factor(coeff(tm*td1,q,i)),b[i])):
> b[i]:=c[i]:
> od:
> y3:=tm:
> 
;
# Finding a defining equation of X_1(26)/<W_2>
> 
;
> X:=0:
> for i from 0 to n1 do
> X:=X+factor(coeff(x0+x1+x2+x3,q,i))*q^i:
> od:
> 
> Y:=0:
> for i from 0 to n1 do
> Y:=Y+factor(coeff(y0+y1+y2+y3,q,i))*q^i:
> od:
> 
> a:='a': b:='b':
> s1[0]:=1: t1[0]:=1:
> 
> s1[1]:=X:
> for i from 2 to 10 do
> s1[i]:=0:
> for j from 0 to n1 do
> s1[i]:=s1[i]+simplify(coeff(s1[1]*s1[i-1],q,j))*q^j:
> od:
> od:
> 
> t1[1]:=Y:
> for i from 2 to 10 do
> t1[i]:=0:
> for j from 0 to n1 do
> t1[i]:=t1[i]+simplify(coeff(t1[1]*t1[i-1],q,j))*q^j:
> od:
> od:
> 
> m1:=7:
> n:=0:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> a1[n]:=0:
> for k from 0 to n1 do
> a1[n]:=a1[n]+simplify(coeff(s1[i]*t1[j],q,k))*q^k:
> od:
> n:=n+1:
> else
> fi:
> od:od:
> 
> a:='a':
> 
> tm:=0:
> for i from 0 to n-1 do
> tm:=tm+a[i]*a1[i]:
> od:
> with(linalg):
> g := (i,j) -> factor(coeff(coeff(tm,q,i-1),a[j-1],1)):
> A := matrix(n+1,n,g):
> B:=kernel(A);
B &Assign; {[Typesetting:-mtable(Typesetting:-mtr(

  Typesetting:-mtd(uminus04032, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(2160, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus01224, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(189, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus09, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(1888, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus0708, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus0197, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus012, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(1, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(668, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus0290, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus0143, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus019, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(241, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus070, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus061, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(2, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(71, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus051, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus03, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus02, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(1, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(uminus01, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(1, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  Typesetting:-mtd(0, rowalign = "", columnalign = "", 

  groupalign = "", rowspan = "1", columnspan = "1"), 

  rowalign = "", columnalign = "", groupalign = ""), 

  align = "axis", rowalign = "baseline", columnalign = "center", 

  groupalign = "{left}", alignmentscope = "true", 

  columnwidth = "auto", width = "auto", rowspacing = "1.0ex", 

  columnspacing = "0.8em", rowlines = "none", 

  columnlines = "none", frame = "none", 

  framespacing = "0.4em 0.5ex", equalrows = "false", 

  equalcolumns = "false", displaystyle = "false", side = "right", 

  minlabelspacing = "0.8em")],[Typesetting:-mtable(

  Typesetting:-mtr(Typesetting:-mtd(896, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus032, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(32, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(94, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus019, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(1, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus0768, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(184, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus010, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(56, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus02, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus024, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus068, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(41, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(25, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(2, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(18, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus051, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(10, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(7, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(13, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus010, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(1, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(10, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus06, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(1, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus01, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), rowalign = "", columnalign = "", 

  groupalign = ""), align = "axis", rowalign = "baseline", 

  columnalign = "center", groupalign = "{left}", 

  alignmentscope = "true", columnwidth = "auto", width = "auto", 

  rowspacing = "1.0ex", columnspacing = "0.8em", 

  rowlines = "none", columnlines = "none", frame = "none", 

  framespacing = "0.4em 0.5ex", equalrows = "false", 

  equalcolumns = "false", displaystyle = "false", side = "right", 

  minlabelspacing = "0.8em")],[Typesetting:-mtable(

  Typesetting:-mtr(Typesetting:-mtd(448, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus0240, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(136, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus021, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(1, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus0160, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(52, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(37, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus01, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus092, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(38, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(20, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(2, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus037, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(12, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(9, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus012, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(7, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(1, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(uminus01, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(1, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), Typesetting:-mtd(0, rowalign = "", 

  columnalign = "", groupalign = "", rowspan = "1", 

  columnspan = "1"), rowalign = "", columnalign = "", 

  groupalign = ""), align = "axis", rowalign = "baseline", 

  columnalign = "center", groupalign = "{left}", 

  alignmentscope = "true", columnwidth = "auto", width = "auto", 

  rowspacing = "1.0ex", columnspacing = "0.8em", 

  rowlines = "none", columnlines = "none", frame = "none", 

  framespacing = "0.4em 0.5ex", equalrows = "false", 

  equalcolumns = "false", displaystyle = "false", side = "right", 

  minlabelspacing = "0.8em")]}


;
> 
;
> tmp:=0:
> k:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> tmp:=tmp+B[1][k]*u^i*v^j:
> k:=k+1:
> else
> fi:
> od:od:
> factor(tmp);

        / 5      4  2    5      4        3  2      2  3       4
(u - 9) \u  v + u  v  - u  + 7 u  v + 9 u  v  + 2 u  v  - 12 u 

         3         2  2      3    4       3       2           2
   + 12 u  v + 20 u  v  - u v  + v  - 37 u  + 38 u  v + 37 u v 

         3       2                 2                      \
   - 21 v  - 92 u  + 52 u v + 136 v  - 160 u - 240 v + 448/


;
> f1:=(u,v)->u^5*v + u^4*v^2 - u^5 + 7*u^4*v + 9*u^3*v^2 + 2*u^2*v^3 - 12*u^4 + 12*u^3*v + 20*u^2*v^2 - u*v^3 + v^4 - 37*u^3 + 38*u^2*v + 37*u*v^2 - 21*v^3 - 92*u^2 + 52*u*v + 136*v^2 - 160*u - 240*v + 448:
# 
# f1(u,v)=0 is a defining equation of X_1(26)/<[W]>
# 
> with(algcurves):
> genus(f1(u,v),u,v);
> j_invariant(f1(u,v),u,v);
> Weierstrassform(f1(u,v),u,v,u0,v0);
                               1

                             12167
                             -----
                              26  

[                                                             
[  3   23      362     2    /   9      8          8        7  
[u0  + -- u0 - --- + v0 , - \9 u  + 9 u  v + 111 u  + 120 u  v
[      3       27                                             
[                                                             

         6  2        7        6         5  2      4  3         6
   + 18 u  v  + 756 u  + 765 u  v + 69 u  v  + 9 u  v  + 4243 u 

           5          4  2       3  3          5          4  
   + 3990 u  v + 213 u  v  + 39 u  v  + 16718 u  + 15060 u  v

          3  2        2  3          4          3           2  2
   + 636 u  v  + 216 u  v  + 46378 u  + 35436 u  v - 4188 u  v 

            3           3          2              2        3
   + 804 u v  + 101359 u  + 65436 u  v - 15684 u v  + 432 v 

             2                     2                          \//  
   + 117944 u  + 95424 u v - 7344 v  - 624 u + 34560 v - 22464/ \3 

  /   7       6        5         4         3         2          
  \3 u  + 28 u  + 194 u  + 1006 u  + 3487 u  + 9128 u  + 15120 u

         \\  /   10      9         9       8        7  2        8
   + 5184//, \3 u   + 3 u  v + 43 u  + 46 u  v + 6 u  v  + 319 u 

          7         6  2      5  3         7         6  
   + 329 u  v + 35 u  v  + 3 u  v  + 1851 u  + 1778 u  v

          5  2       4  3         6         5          4  2
   + 105 u  v  + 19 u  v  + 7972 u  + 7340 u  v + 340 u  v 

         3  3          5          4          3  2        2  3
   + 92 u  v  + 24320 u  + 20264 u  v - 972 u  v  + 400 u  v 

            4          3           2  2          3          3
   + 56860 u  + 40124 u  v - 8020 u  v  + 612 u v  + 87108 u 

            2              2        3          2            
   + 63652 u  v - 11540 u v  + 144 v  + 46096 u  + 58368 u v

           2                           \//   7       6        5
   - 3024 v  - 15040 u + 14976 v - 6912/ \3 u  + 28 u  + 194 u 

           4         3         2                 \  
   + 1006 u  + 3487 u  + 9128 u  + 15120 u + 5184/, 

        2                                
  -18 u0  - 9 u0 v0 + 6 u0 + 15 v0 - 68  
  -------------------------------------, 
                2                        
            9 u0  + 6 u0 + 1             

                    1                   /     4          3
  ------------------------------------- \81 u0  + 1080 u0 
       4         3        2                               
  81 u0  + 108 u0  + 54 u0  + 12 u0 + 1                   

           2            2                                       \
   + 324 u0  v0 - 270 u0  + 216 u0 v0 + 2064 u0 + 2628 v0 - 9611/

  ]
  ]
  ]
  ]
  ]


;
> e:=[1, 0, 1, 0, 0]:
> g1:=(u,v)->v^2+e[1]*u*v+e[3]*v-u^3-e[2]*u^2-e[4]*u-e[5]:
> j_invariant(g1(u,v),u,v);
> Weierstrassform(g1(u,v),u,v,u0,v0);
                             12167
                             -----
                              26  

   [                            2                     
   [  3   23      181     2    u  + 12 u + 12 v + 12  
   [u0  + -- u0 - --- + v0 , - ---------------------, 
   [      48      864                      2          
   [                                   12 u           

        3    2                                              
       u  + u  + u v + 3 u + 2 v + 2  -72 u0 - 144 v0 + 66  
     - -----------------------------, --------------------, 
                      3                     2               
                   2 u                144 u0  + 24 u0 + 1   

                                   ]
         864 u0 + 1728 v0 - 792    ]
     ------------------------------]
            3         2            ]
     1728 u0  + 432 u0  + 36 u0 + 1]


;
# 
# X_1(26)/<[W]> is isomorphic to 26A3.
# U(u,v), V(u,v) define an isomorphism between them.
# Finding q-expansions of generators u0:=u(tau), v0:=v(tau) of 26A3: g1(u,v)=0.
# 
> U:=(u,v)->-2*(3*u^10 + 3*u^9*v + 40*u^9 + 43*u^8*v + 6*u^7*v^2 + 282*u^8 + 289*u^7*v + 29*u^6*v^2 + 3*u^5*v^3 + 1588*u^7 + 1523*u^6*v + 82*u^5*v^2 + 16*u^4*v^3 + 6455*u^6 + 6010*u^5*v + 269*u^4*v^2 + 79*u^3*v^3 + 18036*u^5 + 15244*u^4*v - 1184*u^3*v^2 + 328*u^2*v^3 + 37712*u^4 + 28312*u^3*v - 6624*u^2*v^2 + 344*u*v^3 + 40536*u^3 + 41840*u^2*v - 6312*u*v^2 - 26688*u^2 + 26560*u*v - 576*v^2 - 70272*u + 3456*v - 18432)*(3*u^7 + 28*u^6 + 194*u^5 + 1006*u^4 + 3487*u^3 + 9128*u^2 + 15120*u + 5184)/(3*u^9 + 3*u^8*v + 37*u^8 + 40*u^7*v + 6*u^6*v^2 + 251*u^7 + 255*u^6*v + 23*u^5*v^2 + 3*u^4*v^3 + 1405*u^6 + 1330*u^5*v + 71*u^4*v^2 + 13*u^3*v^3 + 5508*u^5 + 5020*u^4*v + 212*u^3*v^2 + 72*u^2*v^3 + 15124*u^4 + 11812*u^3*v - 1396*u^2*v^2 + 268*u*v^3 + 32624*u^3 + 21812*u^2*v - 5228*u*v^2 + 144*v^3 + 36272*u^2 + 31808*u*v - 2448*v^2 - 5248*u + 11520*v - 9216)^2:
> 
> V:=(u,v)->-8*(3*u^7 + 28*u^6 + 194*u^5 + 1006*u^4 + 3487*u^3 + 9128*u^2 + 15120*u + 5184)^2*(3*u^10 + 3*u^9*v + 40*u^9 + 43*u^8*v + 6*u^7*v^2 + 282*u^8 + 289*u^7*v + 29*u^6*v^2 + 3*u^5*v^3 + 1588*u^7 + 1523*u^6*v + 82*u^5*v^2 + 16*u^4*v^3 + 6455*u^6 + 6010*u^5*v + 269*u^4*v^2 + 79*u^3*v^3 + 18036*u^5 + 15244*u^4*v - 1184*u^3*v^2 + 328*u^2*v^3 + 37712*u^4 + 28312*u^3*v - 6624*u^2*v^2 + 344*u*v^3 + 40536*u^3 + 41840*u^2*v - 6312*u*v^2 - 26688*u^2 + 26560*u*v - 576*v^2 - 70272*u + 3456*v - 18432)/(3*u^9 + 3*u^8*v + 37*u^8 + 40*u^7*v + 6*u^6*v^2 + 251*u^7 + 255*u^6*v + 23*u^5*v^2 + 3*u^4*v^3 + 1405*u^6 + 1330*u^5*v + 71*u^4*v^2 + 13*u^3*v^3 + 5508*u^5 + 5020*u^4*v + 212*u^3*v^2 + 72*u^2*v^3 + 15124*u^4 + 11812*u^3*v - 1396*u^2*v^2 + 268*u*v^3 + 32624*u^3 + 21812*u^2*v - 5228*u*v^2 + 144*v^3 + 36272*u^2 + 31808*u*v - 2448*v^2 - 5248*u + 11520*v - 9216)^3:
> 
;
> a:='a': b:='b': s1:='s1': t1:='t1':
> 
> s1[0]:=1: t1[0]:=1:
> 
> s1[1]:=X:
> for i from 2 to 30 do
> s1[i]:=0:
> for j from 0 to n1 do
> s1[i]:=s1[i]+simplify(coeff(s1[1]*s1[i-1],q,j))*q^j:
> od:
> od:
> 
> t1[1]:=Y:
> for i from 2 to 10 do
> t1[i]:=0:
> for j from 0 to n1 do
> t1[i]:=t1[i]+simplify(coeff(t1[1]*t1[i-1],q,j))*q^j:
> od:
> od:
> 
> for i from 0 to 30 do
> for j from 0 to 10 do
> a[i,j]:=0:
> for k from 0 to n1 do
> a[i,j]:=a[i,j]+factor(coeff(s1[i]*t1[j],q,k))*q^k:
> od:od:od:
> 
> txn:=-18*a[17,0] - 18*a[16,1] - 408*a[16,0] - 426*a[15,1] - 36*a[14,2] - 5096*a[15,0] - 5306*a[14,1] - 510*a[13,2] - 18*a[12,3] - 46876*a[14,0] - 48042*a[13,1] - 4444*a[12,2] - 264*a[11,3] - 338476*a[13,0] - 340918*a[12,1] - 29530*a[11,2] - 2534*a[10,3] - 1986952*a[12,0] - 1955066*a[11,1] - 139968*a[10,2] - 18636*a[9,3] - 9723512*a[11,0] - 9310906*a[10,1] - 475090*a[9,2] - 104198*a[8,3] - 39804124*a[10,0] - 37072114*a[9,1] - 955752*a[8,2] - 471828*a[7,3] - 135980674*a[9,0] - 123061196*a[8,1] + 997082*a[7,2] - 1727170*a[6,3] - 384258792*a[8,0] - 339787848*a[7,1] + 16374800*a[6,2] - 4936768*a[5,3] - 871089952*a[7,0] - 767956112*a[6,1] + 71749376*a[5,2] - 10941872*a[4,3] - 1501508432*a[6,0] - 1386725920*a[5,1] + 199121712*a[4,2] - 17017856*a[3,3] - 1732772352*a[5,0] - 1970218624*a[4,1] + 331834368*a[3,2] - 13803264*a[2,3] - 602428416*a[4,0] - 2067761920*a[3,1] + 270067968*a[2,2] - 3566592*a[1,3] + 1798198272*a[3,0] - 1300064256*a[2,1] + 82861056*a[1,2] + 2738221056*a[2,0] - 379883520*a[1,1] + 5971968*a[0,2] + 1285963776*a[1,0] - 35831808*a[0,1] + 191102976:
> txd:=9*a[18,0] + 18*a[17,1] + 9*a[16,2] + 222*a[17,0] + 462*a[16,1] + 276*a[15,2] + 36*a[14,3] + 2875*a[16,0] + 5996*a[15,1] + 3712*a[14,2] + 636*a[13,3] + 54*a[12,4] + 27004*a[15,0] + 55360*a[14,1] + 33520*a[13,2] + 5626*a[12,3] + 594*a[11,4] + 36*a[10,5] + 200019*a[14,0] + 401998*a[13,1] + 236477*a[12,2] + 37542*a[11,3] + 4383*a[10,4] + 294*a[9,5] + 9*a[8,6] + 1203646*a[13,0] + 2357946*a[12,1] + 1324452*a[11,2] + 188106*a[10,3] + 27788*a[9,4] + 1888*a[8,5] + 78*a[7,6] + 6053961*a[12,0] + 11477044*a[11,1] + 6011050*a[10,2] + 653014*a[9,3] + 121765*a[8,4] + 9646*a[7,5] + 601*a[6,6] + 25701536*a[11,0] + 47032832*a[10,1] + 22675824*a[9,2] + 1518432*a[8,3] + 444264*a[7,4] + 21416*a[6,5] + 3480*a[5,6] + 91866392*a[10,0] + 161602928*a[9,1] + 70048800*a[8,2] + 822840*a[7,3] + 1524032*a[6,4] + 7544*a[5,5] + 13016*a[4,6] + 276044320*a[9,0] + 464881192*a[8,1] + 175108888*a[7,2] - 12863160*a[6,3] + 4085760*a[5,4] - 217560*a[4,5] + 42336*a[3,6] + 686729200*a[8,0] + 1113348608*a[7,1] + 360934768*a[6,2] - 62382752*a[5,3] + 11198576*a[4,4] - 1503680*a[3,5] + 92560*a[2,6] + 1367009792*a[7,0] + 2158757920*a[6,1] + 603302464*a[5,2] - 166987264*a[4,3] + 33531584*a[3,4] - 3556768*a[2,5] + 77184*a[1,6] + 2077771904*a[6,0] + 3291907328*a[5,1] + 822887440*a[4,2] - 341979104*a[3,3] + 59156624*a[2,4] - 2817792*a[1,5] + 20736*a[0,6] + 2106410496*a[5,0] + 3789687680*a[4,1] + 1131498368*a[3,2] - 465233536*a[2,3] + 40931712*a[1,4] - 705024*a[0,5] + 694470912*a[4,0] + 2612478976*a[3,1] + 1417313792*a[2,2] - 282636288*a[1,3] + 9310464*a[0,4] - 982036480*a[3,0] + 99811328*a[2,1] + 854913024*a[1,2] - 59056128*a[0,3] - 641024000*a[2,0] - 707198976*a[1,1] + 177831936*a[0,2] + 96731136*a[1,0] - 212336640*a[0,1] + 84934656:
> tyn:=-216*a[24,0] - 216*a[23,1] - 6912*a[23,0] - 7128*a[22,1] - 432*a[21,2] - 120816*a[22,0] - 125352*a[21,1] - 10152*a[20,2] - 216*a[19,3] - 1522304*a[21,0] - 1573784*a[20,1] - 138384*a[19,2] - 5184*a[18,3] - 15159176*a[20,0] - 15554464*a[19,1] - 1392712*a[18,2] - 73944*a[17,3] - 124982816*a[19,0] - 126874608*a[18,1] - 10989888*a[17,2] - 784736*a[16,3] - 877571712*a[18,0] - 879222480*a[17,1] - 70603344*a[16,2] - 6617392*a[15,3] - 5335525696*a[17,0] - 5266632304*a[16,1] - 374906304*a[15,2] - 46329952*a[14,3] - 28380036264*a[16,0] - 27560233944*a[15,1] - 1632715376*a[14,2] - 275491728*a[13,3] - 132869526848*a[15,0] - 126827818296*a[14,1] - 5655076432*a[13,2] - 1406911840*a[12,3] - 548797048144*a[14,0] - 514812193384*a[13,1] - 13992432424*a[12,2] - 6215662232*a[11,3] - 1998353517568*a[13,0] - 1843878731608*a[12,1] - 12610420272*a[11,2] - 23775952608*a[10,3] - 6390451453240*a[12,0] - 5815894601424*a[11,1] + 95228418200*a[10,2] - 78434368376*a[9,3] - 17805284318752*a[11,0] - 16079596031328*a[10,1] + 680790023552*a[9,2] - 221441992128*a[8,3] - 42662104021632*a[10,0] - 38685519106752*a[9,1] + 2729133223680*a[8,2] - 526702214592*a[7,3] - 86013846469312*a[9,0] - 80166741492608*a[8,1] + 7962312593728*a[7,2] - 1029577021440*a[6,3] - 140349953006080*a[8,0] - 140977073393152*a[7,1] + 17729430369792*a[6,2] - 1592369090560*a[5,3] - 171036676310016*a[7,0] - 206101548579840*a[6,1] + 29751587801088*a[5,2] - 1809862189056*a[4,3] - 120810034569216*a[6,0] - 243101847289856*a[5,1] + 35238829252608*a[4,2] - 1317927075840*a[3,3] + 36805898649600*a[5,0] - 218823442956288*a[4,1] + 26323348045824*a[3,2] - 501931966464*a[2,3] + 214946624176128*a[4,0] - 135875086516224*a[3,1] + 10829614546944*a[2,2] - 73956851712*a[1,3] + 252513662533632*a[3,0] - 51241778675712*a[2,1] + 2079391481856*a[1,2] + 141532392849408*a[2,0] - 10044372418560*a[1,1] + 123834728448*a[0,2] + 38223652847616*a[1,0] - 743008370688*a[0,1] + 3962711310336:
> tyd:=27*a[27,0] + 81*a[26,1] + 81*a[25,2] + 27*a[24,3] + 999*a[26,0] + 3078*a[25,1] + 3321*a[24,2] + 1404*a[23,3] + 162*a[22,4] + 19098*a[25,0] + 59400*a[24,1] + 66204*a[23,2] + 30924*a[22,3] + 5427*a[21,4] + 405*a[20,5] + 255754*a[24,0] + 793776*a[23,1] + 890490*a[22,2] + 429499*a[21,3] + 86157*a[20,4] + 9639*a[19,5] + 540*a[18,6] + 2682312*a[23,0] + 8261346*a[22,1] + 9218748*a[21,2] + 4458900*a[20,3] + 929697*a[19,4] + 119205*a[18,5] + 9531*a[17,6] + 405*a[16,7] + 23187912*a[22,0] + 70626648*a[21,1] + 77845134*a[20,2] + 37186773*a[19,3] + 7779165*a[18,4] + 1086090*a[17,5] + 98703*a[16,6] + 5670*a[15,7] + 162*a[14,8] + 170328818*a[21,0] + 511436880*a[20,1] + 553231812*a[19,2] + 257354400*a[18,3] + 52386603*a[17,4] + 7842591*a[16,5] + 796619*a[15,6] + 52623*a[14,7] + 2025*a[13,8] + 27*a[12,9] + 1084031514*a[20,0] + 3200598492*a[19,1] + 3379456218*a[18,2] + 1511102661*a[17,3] + 289910457*a[16,4] + 45767055*a[15,5] + 4932687*a[14,6] + 393729*a[13,7] + 18117*a[12,8] + 351*a[11,9] + 6049135149*a[19,0] + 17523633105*a[18,1] + 17973824247*a[17,2] + 7630097289*a[16,3] + 1336670553*a[15,4] + 224572803*a[14,5] + 24192558*a[13,6] + 2185980*a[12,7] + 126447*a[11,8] + 3465*a[10,9] + 29822872225*a[18,0] + 84589177458*a[17,1] + 83857858281*a[16,2] + 33300277315*a[15,3] + 5083781919*a[14,4] + 941429100*a[13,5] + 96569138*a[12,6] + 10033221*a[11,7] + 614337*a[10,8] + 26281*a[9,9] + 130479884196*a[17,0] + 361722485016*a[16,1] + 344900346720*a[15,2] + 125885822004*a[14,3] + 15470747520*a[13,4] + 3385228920*a[12,5] + 289066812*a[11,6] + 39419040*a[10,7] + 2315808*a[9,8] + 149760*a[8,9] + 507348204588*a[16,0] + 1372806346116*a[15,1] + 1253142731580*a[14,2] + 411670647372*a[13,3] + 34924612260*a[12,4] + 10857386076*a[11,5] + 540925536*a[10,6] + 126282192*a[9,7] + 5766516*a[8,8] + 719076*a[7,9] + 1751598597216*a[15,0] + 4621689654732*a[14,1] + 4020572437788*a[13,2] + 1155847700872*a[12,3] + 40196764608*a[11,4] + 32396330148*a[10,5] - 73511932*a[9,6] + 383516340*a[8,7] + 498540*a[7,8] + 2784384*a[6,9] + 5350926277440*a[14,0] + 13767804137856*a[13,1] + 11373679140384*a[12,2] + 2756243993328*a[11,3] - 93667403328*a[10,4] + 92583450480*a[9,5] - 6273681504*a[8,6] + 1220870256*a[7,7] - 61165152*a[6,8] + 8472432*a[5,9] + 14366020133568*a[13,0] + 36100069840224*a[12,1] + 28278528719184*a[11,2] + 5499982428048*a[10,3] - 723320469216*a[9,4] + 265767688800*a[8,5] - 32242966992*a[7,6] + 3779806320*a[6,7] - 330264096*a[5,8] + 20950272*a[4,9] + 33533482929856*a[12,0] + 82616055304128*a[11,1] + 61478634054768*a[10,2] + 8937593230528*a[9,3] - 2559129497472*a[8,4] + 739032362736*a[7,5] - 104972681680*a[6,6] + 12029329392*a[5,7] - 1093722816*a[4,8] + 36729280*a[3,9] + 66912137080320*a[11,0] + 162997806027072*a[10,1] + 116276294140800*a[9,2] + 11451410880384*a[8,3] - 6580825233984*a[7,4] + 1784369964672*a[6,5] - 275941431168*a[5,6] + 32661304128*a[4,7] - 2072685120*a[3,8] + 35506944*a[2,9] + 110943191804928*a[10,0] + 271816287621120*a[9,1] + 190075596487872*a[8,2] + 11661591739200*a[7,3] - 13267752091008*a[6,4] + 3628213850496*a[5,5] - 587897821248*a[4,6] + 55170937152*a[3,7] - 1977156864*a[2,8] + 16671744*a[1,9] + 145367104179200*a[9,0] + 370845143357952*a[8,1] + 265416757201152*a[7,2] + 11172793448768*a[6,3] - 22078360499520*a[5,4] + 6111860269248*a[4,5] - 839213427392*a[3,6] + 48554857728*a[2,7] - 892062720*a[1,8] + 2985984*a[0,9] + 134802419346432*a[8,0] + 390694549361664*a[7,1] + 311947768577280*a[6,2] + 17202191860224*a[5,3] - 31712672374272*a[4,4] + 7436119171584*a[3,5] - 665282246400*a[2,6] + 20521921536*a[1,7] - 152285184*a[0,8] + 57331777277952*a[7,0] + 274250976869376*a[6,1] + 296562442847232*a[5,2] + 40273222182912*a[4,3] - 35417357709312*a[3,4] + 5353484700672*a[2,5] - 261109122048*a[1,6] + 3305484288*a[0,7] - 46094016040960*a[6,0] + 53886533664768*a[5,1] + 192335267057664*a[4,2] + 65999419817984*a[3,3] - 24437773135872*a[2,4] + 1968754802688*a[1,5] - 39609077760*a[0,6] - 77659674869760*a[5,0] - 106948100358144*a[4,1] + 39920322871296*a[3,2] + 54717234020352*a[2,3] - 8741790646272*a[1,4] + 283931246592*a[0,5] - 20057430687744*a[4,0] - 85768811839488*a[3,1] - 36129525202944*a[2,2] + 21297789665280*a[1,3] - 1232040886272*a[0,4] + 18694082134016*a[3,0] - 7365533368320*a[2,1] - 24393912680448*a[1,2] + 3124915863552*a[0,3] + 8480782024704*a[2,0] + 11447832674304*a[1,1] - 4292937252864*a[0,2] - 1337211224064*a[1,0] + 2935341711360*a[0,1] - 782757789696:
> 
> xn:=0:
> for j from 0 to n1 do
> xn:=xn+factor(coeff(txn,q,j))*q^j:
> od:
> 
> xd:=0:
> for j from 0 to n1 do
> xd:=xd+factor(coeff(txd,q,j))*q^j:
> od:
> 
> yn:=0:
> for j from 0 to n1 do
> yn:=yn+factor(coeff(tyn,q,j))*q^j:
> od:
> 
> yd:=0:
> for j from 0 to n1 do
> yd:=yd+factor(coeff(tyd,q,j))*q^j:
> od:
> 
> b:='b': c:='c':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+b[i]*q^i:
> od:
> for i from 0 to n1 do
> c[i]:=factor(solve(simplify(coeff(xn,q,i))=simplify(coeff(tm*xd,q,i)),b[i])):
> b[i]:=c[i]:
> od:
> u0:=tm:
> 
> b:='b': c:='c':
> tm:=0:
> for i from 0 to n1 do
> tm:=tm+b[i]*q^i:
> od:
> for i from 0 to n1 do
> c[i]:=factor(solve(simplify(coeff(yn,q,i))=simplify(coeff(tm*yd,q,i)),b[i])):
> b[i]:=c[i]:
> od:
> v0:=tm:
> for i from 0 to 5 do
> factor(coeff(g1(u0,v0),q,i));
> od;
                               0

                               0

                               0

                               0

                               0

                               0

;
> 
;
# Fing a tetraelliptic map from X_1(26) to 26A3.
> a:='a': b:='b': c:='c': s1:='s1': t1:='t1': m1:=5:
> 
> k1:=0:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> k1:=k1+1:
> else
> fi:
> od:od:
> 
> s1[0]:=1: t1[0]:=1:
> 
> s1[1]:=x0:
> for i from 2 to m1 do
> s1[i]:=0:
> for j from 0 to n1 do
> s1[i]:=s1[i]+simplify(coeff(s1[1]*s1[i-1],q,j))*q^j:
> od:
> od:
> 
> t1[1]:=y0:
> for i from 2 to m1 do
> t1[i]:=0:
> for j from 0 to n1 do
> t1[i]:=t1[i]+simplify(coeff(t1[1]*t1[i-1],q,j))*q^j:
> od:
> od:
> 
> tm1:=0:
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> tm1:=tm1+a[n]*s1[i]*t1[j]:
> n:=n+1:
> else
> fi:
> od:od:
> 
> tm2:=0:
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> tm2:=tm2+a[k1+n]*s1[i]*t1[j]:
> n:=n+1:
> else
> fi:
> od:od:
> 
> A1:=matrix(2*k1+2,2*k1):
> for i from 1 to 2*k1+2 do
> for j from 1 to 2*k1 do
> A1[i,j]:=simplify(coeff(coeff(tm1-u0*tm2,q,i-1),a[j],1)):
> od:od:
> B1:=kernel(A1);
> fn1:=0: fd1:=0:
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> fn1:=fn1+B1[1][n]*u^i*v^j:
> n:=n+1:
> else
> fi:
> od:od:
> 
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> fd1:=fd1+B1[1][k1+n]*u^i*v^j:
> n:=n+1:
> else
> fi:
> od:od:
> factor(fn1/fd1);
> A2:=matrix(2*k1+2,2*k1):
> for i from 1 to 2*k1+2 do
> for j from 1 to 2*k1 do
> A2[i,j]:=simplify(coeff(coeff(tm1-v0*tm2,q,i-1),a[j],1)):
> od:od:
> B2:=kernel(A2);
> fn2:=0: fd2:=0:
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> fn2:=fn2+B2[1][n]*u^i*v^j:
> n:=n+1:
> else
> fi:
> od:od:
> 
> n:=1:
> for i from 0 to m1 do
> for j from 0 to m1 do
> if (i+j<m1+1) then
> fd2:=fd2+B2[1][k1+n]*u^i*v^j:
> n:=n+1:
> else
> fi:
> od:od:
> factor(fn2/fd2);
> 
;
> P1:=(u,v)->(v - 1)*(u^2 + u + v)*(u + v)/(u^4 + u^3*v + 2*u^3 + 2*u^2*v + u*v^2 + u^2 - u*v - v^2 + u + v):
> P2:=(u,v)->-(v - 1)*(2*u*v + v^2 - u - v)/(u^4 + u^3*v + 2*u^3 + 2*u^2*v + u*v^2 + u^2 - u*v - v^2 + u + v):
# P1(u,v),P2(u,v) give a tetraelliptic map from X_1(26) to 26A3.
> 
